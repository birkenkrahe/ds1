#+title: Barplots in base R and ggplot2
#+AUTHOR: [yourname] (pledged)
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2024
#+OPTIONS: toc:1 num:1
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
* README

- For detail and many more examples on barplots, histograms, density
  plots, and their customization, see the updated (for 2024) lecture
  script =10_plots.org= in GitHub.

- This practice file is an edited version of parts of that file
  pertaining only to boxplots and scatterplots, using an earthquake
  dataset.

* Boxplots - global summary stats

- Box-and-whisker plots, or boxplots represent the five-number
  ~summary~:
  1) Minimum
  2) 1st quartile (25% of the values are below it)
  3) Median (50% of the values are below/above it)
  4) Mean (Arithmetic average)
  5) 3rd quartile (75% of the values are below it)
  6) Maximum

- For example for ~x <- c(1,2,3,4,5,6,7,8,9,10)~:
  #+begin_src R

  #+end_src

- We use the built-in ~quakes~ data frame of the location of 1,000
  seismic events with magnitude > 4.0 near the island of Fiji.

- Check the structure, print the top of the dataset, and compute the
  summary for the whole data frame.

  #+begin_src R

  #+end_src

- The observations include the following variables: latitude and
  longitude, depth and magnitude of the epicenter of the earthquake,
  and number of the stations that registered the event.

- Not all variables are statistically relevant for the =summary=. Pick
  the ones that are and compute their =summary=.

  #+begin_src R

  #+end_src

- The boxplot of the earthquake magnitudes shows the output of ~summary~
  except the ~mean~, but it also shows /outliers/, extreme values that
  distort the mean. [[https://github.com/birkenkrahe/ds1/blob/main/img/9_boxplot_explained.png][Here is an illustration of the boxplot]].

- Creating a =boxplot= is simple. Do it for the earthquake magnitudes
  (~quakes$mag~):

  #+begin_src R :results graphics file :file quakes_mag_box.png

  #+end_src

- Let's look at histogram and boxplot on top of one another, and then
  do a minimal customization).

  #+begin_src R :results graphics file :file quakes.png

  #+end_src

- Like the histogram, a boxplot shows important *global* (overall)
  features of the value distribution:
  + centrality (where is the midpoint of the distribution?)x
  + spread (how far are the whiskers apart, how wide is the box?)
  + skewness (where is the box relative to the whiskers?)

- The boxplot does *not* show important *local* features, like
  + modes (multiple significant peaks or maxima)
  + valleys (local minima)

- Outliers are displayed explicitly, computed as 1.5 times the
  Inter-Quartile Range or =IQR=.

- The ~range~ parameter in ~boxplot~ determines how far the whiskers
  should extend from the box. ~range=0~ includes all values.
  #+begin_src R :results graphics file :file ../img/9_boxplot1.png

  #+end_src

* Side-by-side boxplots

- Boxplots are useful to compare data features by plotting them
  side-by-side, e.g. for identifying how many monitoring stations
  detected each event

- We use ~cut~ to create three levels of stations for three boxes:
  #+begin_src R

  #+end_src

- The factor ~stations~ breaks the observations in three groups
  1) events detected by 50 stations or fewer ~(0,50]~
  2) events detected by 51 to 100 stations ~(50,100]~
  3) events detected by between 100 and 150 stations ~(100,150]~

- The boxplot compares the distributions of the magnitudes of the
  events according to these three groups:
  #+begin_src R :results graphics file :file 9_stations.png

  #+end_src

- You can see that the higher the recorded magnitude, the more
  stations detected the given seismic event.

* Scatterplots

- Scatterplots are used to identify relationships between the observed
  values of two different numeric-continuous variables x,y

- The scatterplot is displayed as an x-y-coordinate plot but not every
  x-y-plot shows relationships of interest - e.g. a plot of the
  latitude vs. longitude in ~quakes~:
  #+begin_src R :results graphics file :file noscatter.png

  #+end_src

* Scatterplots of more than two variables

- The famous ~iris~ dataset, collected in the mid-1930s, contains petal
  and sepal measurements for three species of perennial iris flowers,
  /Iris setosa/, /Iris virginica/, and /Iris versicolor/ (Fisher, 1936).

  [[https://github.com/birkenkrahe/ds1/blob/main/img/iris.png][See image for these flowers]].

- View the first few records of the first four variables only:
  #+begin_src R

  #+end_src

- To plot every variable against every other, you can plot an array of
  x-y-plots:
  + Each column has the shown variable as x- and the others as y-axis
  + Each row has the shown variable as y- and the others as x-axis
  + E.g. the square (2,1) shows x = ~Sepal.Length~, y = all others
  #+begin_src R :results graphics file :file iris.png

  #+end_src

- What can you say about the =Species= variable?
  #+begin_quote

  #+end_quote

  #+begin_src R

  #+end_src

- The array is much easier to read when adding the iris species as a
  sixth variable to the plot.
  #+begin_src R :results graphics file :file 9_iris_col.png
    
  #+end_src

- Homing in on one of the diagrams, e.g. ~Sepal.Width~ vs. ~Sepal.Length~:
  #+begin_src R :results graphics file :file 9_iris1.png

  #+end_src

 - As an example for a fully customized plot with legend:
  #+begin_src R :results graphics file :file ../img/9_iris_final.png
    plot(
      y=iris$Petal.Length, xlab="Petal length (cm)",
      x=iris$Petal.Width, ylab="Petal width (cm)",
      col=iris$Species,
      pch=19)
    legend("topleft",
           legend=c("setosa", "virginica","versicolor"),
           col=c("black","red","green"), pch=19)
    title("Petal width vs. length for three species of iris")
  #+end_src

- This dataset is also one example for an [[https://shiny.posit.co/r/gallery/start-simple/kmeans-example/][R Shiny dashboard]] that we've
  been discussing in the "data visualization" class.

* 10 piccolo problems

1) Create a histogram of the horsepower data of the 32 cars in the
   ~mtcars~ data set. Run the code.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
2) Label the x-axis. Run the code.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
3) Label the y-axis. Run the code.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
4) Title the plot. Run the code.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
5) Print the binwidth.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
6) Plot the logarithm of hp to base 10.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
7) Plot only the car count for cars with a horsepower of greater or
   equal ~sub = 220 hp~.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
8) Change the x-axis label so that it automatically shows ~sub~.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
9) Put the log10 plot and the original plot in one plot array (on top
   of one another) - without any customization.
   #+begin_src R :results output :session *R* :exports both :noweb yes

   #+end_src
10) Put the log10 plot and the original plot in one plot array (side by
    side) - without any customization.
    #+begin_src R :results output :session *R* :exports both :noweb yes

    #+end_src
