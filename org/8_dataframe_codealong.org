#+title: Data frames, Factors, Lists [codealong]
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2023
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: black
:END:
* Example: creating data frames

- Create three vectors to put into the data frame
  1) the 1st uses the constant vector ~LETTERS~
  2) the 2nd uses the ~sample~ function to draw a sample from the first
  3) the 3rd is just a colon-generated vector of integers

- Extract the first three letters from =LETTERS= and store them in =L3=:
  #+begin_src R

  #+end_src

- Use =sample= to draw 10 letters from =L3=:
  #+begin_src R

  #+end_src

- Create a data frame =df= from the number =1=, the vector =1:10=, and =fac=.
  #+name: dataframe_unnamed
  #+begin_src R

  #+end_src

- Create a data frame =df2= with the same content but name the first
  column =x= and the second column =y=:
  #+name: dataframe_named
  #+begin_src R

  #+end_src

- More information: check out ~example(data.frame)~ (on the R console).

* Functions to test data structures

- Check if =df2= is a: vector, matrix, list, data frame:
  #+begin_src R :session :results output

  #+end_src

- Surprise: data frames are special [rectangular] lists

- Can a data frame contain a data frame? Test this by trying to add =df=
  to =df2=:
  #+begin_src R

  #+end_src

** Practice

- Create the data frame shown [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][in this figure]], and name it =df=:

Hints:
- Define vectors with ~c()~
- Create data frame with ~data.frame()~
- You can rename columns with ~colnames()~
- You can auto-convert ~character~ to ~factor~

#+begin_src R :session :results output
  ## define vectors

  ## create data frame and properties

  ## auto-convert characters to factors

#+end_src

* Select subsets using index operators

- Use the dataframe =df= [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][shown here]] that you created earlier.

- Select subsets using the index operators ~$~ and ~[]~:
  1) Select rows 1 to 2 using ~[]~
  2) Select column 2 using ~[]~ and ~$~
  3) Select row 3 of column 2  using ~[]~ and ~$~
  4) Select rows 1 to 3 in columns 3 and 4 using ~[]~ and ~$~
  5) Select rows 2 to 3, and columns 1 and 4 using ~[]~ and ~$~

  #+begin_src R
  
  #+end_src

* Select indices and values using ~which~, ~names~, ~%in%~

Select data frame indices using functions ~which~, ~colnames~ and ~%in%~:
1) Print the column index for the column ~price~ using ~colnames~
2) Store the row index for ~textbook~ in ~idx~
3) Print the entry ~textbook~ using ~idx~
4) Check if ~pencil_case~ is a store item using ~%in%~

For the last question, the format of the ~%in%~ matching function to
find a string is: ~string %in% vector~

#+begin_src R


#+end_src

* Select subsets using the ~subset~ function

Using ~subset~,
1) Select product IDs above 20
2) Select all books listed
3) Select all items cheaper than $11 and in stock

   #+begin_src R

   #+end_src

* Some useful functions

- ~dim~ gives you the data frame dimensions
  #+begin_src

  #+end_src
- ~nrow~ gives you the number of rows
  #+begin_src

  #+end_src
- ~ncol~ gives you the number of columns
  #+begin_src

  #+end_src
- ~head(x=,N)~ gives you the first ~N~ rows
  #+begin_src

  #+end_src
- ~order~ gives you the indices of an ordered vector
  #+begin_src

  #+end_src
- ~subset~ gives you a subset of any data structure
  #+begin_src

  #+end_src

* Trying to create a non-rectangular data frame

- Define two vectors of different length 2, 4
- Define two vectors of different lengths 2, 3
- Combine them using ~data.frame~

#+begin_src R

#+end_src

- [[https://github.com/birkenkrahe/ds1/blob/main/img/7_challenge.png][This image]] shows what's going on (for two vectors)

* Extracting information from a data frame

- Use the dataset ~ToothGrowth~ (aka ~tg~)
- Find the number of cases in which tooth length is less
  than 5. Expected output: =10.0  8.2  9.4  9.7 14.5=

  #+begin_src R :session :results output

  #+end_src

* Extract factor levels from a data frame

- What's the class of ~tg$supp~?
- What're the levels of ~tg$supp~?
- We want to compare ~mean~ tooth length for each ~level~

#+begin_src R :session :results output

#+end_src

* What about lists?

1) Check the object and storage type of =mtcars=
   #+begin_src R

   #+end_src

2) Extract the first element of the =mpg= vector of =mtcars=:
   - Using the accessor operator =$=
   - Using only the =[]= operator for a =list=

   #+begin_src R

   #+end_src

3) Check that both expressions are =identical=.

   #+begin_src R

   #+end_src

4) Create a =list= from =mtcars= and check its storage type.

   #+begin_src R

   #+end_src
