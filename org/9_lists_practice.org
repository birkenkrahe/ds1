#+title: Lists in R - PRACTICE FILE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2024
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
* Code along: Creating a list

- Create a list ~foo~ and print it, then print its structure:
  #+begin_src R
    list(1, c("a","b","c"), list(letters[1:3], 3.14)) -> foo
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
  [1] 1

  [[2]]
  [1] "a" "b" "c"

  [[3]]
  [[3]][[1]]
  [1] "a" "b" "c"

  [[3]][[2]]
  [1] 3.14
  #+end_example

- How long is ~foo~?
  #+begin_src R
    length(foo)
  #+end_src

#+RESULTS:
: [1] 3

- Show its structure:
  #+begin_src R
    str(foo)
  #+end_src

  #+RESULTS:
  : List of 3
  :  $ : num 1
  :  $ : chr [1:3] "a" "b" "c"
  :  $ :List of 2
  :   ..$ : chr [1:3] "a" "b" "c"
  :   ..$ : num 3.14

- What R object class does ~foo~ have, and what object classes do its
  elements have?
  #+begin_src R
    ## object class of the list
    class(foo)
    ## loop over the list using an `apply` function
    lapply(X=foo, FUN=class)
    ## loop over the list using `for`
    for (i in foo) print(class(i))
  #+end_src

  #+RESULTS:
  #+begin_example
  [1] "list"
  [[1]]
  [1] "numeric"

  [[2]]
  [1] "character"

  [[3]]
  [1] "list"
  [1] "numeric"
  [1] "character"
  [1] "list"
  #+end_example

  #+begin_src R
    letters
    LETTERS
  #+end_src

  #+RESULTS:
  :  [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
  :  [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

* Code along: Creating (named) lists

- Creating a list is much like creating a vector with the ~c~ function

- You supply the elements to the ~list~ function, separated by commata

- Let's define a list ~foo~ and print it:
  #+begin_src R
    foo <- list(
      matrix(data=1:4,
             nrow=2,
             ncol=2),
      c(TRUE,FALSE,TRUE,TRUE),
      "hello")
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
       [,1] [,2]
  [1,]    1    3
  [2,]    2    4

  [[2]]
  [1]  TRUE FALSE  TRUE  TRUE

  [[3]]
  [1] "hello"
  #+end_example

  #+begin_src R
    seq(from=-4, to=4, length.out=20) -> num
    matrix(c(F,T,T,T,F,T,T,F,F), nrow=3,byrow=FALSE) -> mat
    c("don","strings") -> char
    list(num,mat,char) -> foo
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
   [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316 -0.6315789
  [10] -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895  2.7368421  3.1578947
  [19]  3.5789474  4.0000000

  [[2]]
        [,1]  [,2]  [,3]
  [1,] FALSE  TRUE  TRUE
  [2,]  TRUE FALSE FALSE
  [3,]  TRUE  TRUE FALSE

  [[3]]
  [1] "don"     "strings"
  #+end_example

- List elements are indexed with the ~[[~ operator. Within each element,
  the elements are indexed according to their data structure

- What is the ~length~ of the list ~foo~?
  #+begin_src R
    length(foo)
  #+end_src

  #+RESULTS:
  : [1] 3

- What is the ~class~ of the list ~foo~ and of its elements?
  #+begin_src R
    class(foo[[1]])   # class of foo's first element
    class(foo[[2]])
    class(foo[[3]])
    for (i in foo) print(class(i))
  #+end_src

  #+RESULTS:
  : [1] "numeric"
  : [1] "matrix" "array"
  : [1] "character"
  : [1] "numeric"
  : [1] "matrix" "array"
  : [1] "character"

* Practice creating a ~list~

Create a list that contains, in this order
1) a ~seq~-uence of 20 evenly spread numbers between ~-4~ and ~4~
2) a 3 x 3 ~matrix~ of the ~logical~ vector ~c(F,T,T,T,F,T,T,F,F)~ filled
   column-wise
3) a ~character~ vector with the two strings ~"don"~ and ~"quixote"~

#+begin_src R
  list("SEQ"=seq(-4,4,length.out=20),
       "MAT"=matrix(c(F,T,T,T,F,T,T,F,F),nrow=3,byrow=TRUE),
       "CHR"=c("don","quixote")) -> foo
#+end_src

#+RESULTS:

#+begin_src R
  foo[[2]]
#+end_src

#+RESULTS:
:       [,1]  [,2]  [,3]
: [1,] FALSE  TRUE  TRUE
: [2,]  TRUE FALSE  TRUE
: [3,]  TRUE FALSE FALSE

* Code along: Subsetting lists

- Retrieve list members using indices in *double* square brackets =[[]]=

- Retrieve (or remove) list member elements using *single* square
  brackets =[]=

- Some examples:
  1) Retrieve the 1st list member of ~foo~ defined earlier.
     #+begin_src R :noweb yes
       foo[[1]]
     #+end_src

     #+RESULTS:
     :  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316 -0.6315789
     : [10] -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895  2.7368421  3.1578947
     : [19]  3.5789474  4.0000000

  2) Retrieve the 3rd element of the 1st member of ~foo~.
     #+begin_src R
       foo[[1]][3]
     #+end_src

     #+RESULTS:
     : [1] -3.157895

  3) Retrieve the 2nd through 4th element of the 2nd member.
     #+begin_src R
       foo[[2]][2:4]
     #+end_src

     #+RESULTS:
     : [1] TRUE TRUE TRUE

  4) Retrieve the 3rd member.
     #+begin_src R
       foo[[3]]
     #+end_src

     #+RESULTS:
     : [1] "don"     "quixote"

  5) What is the 2nd element of the 3rd member?
     #+begin_src R
       foo[[3]][2]
     #+end_src

     #+RESULTS:
     : [1] "quixote"
     
- Same for the matrix member of the list: use double indices
  1) retrieve the 2nd column of the 1st member of ~foo~
     #+begin_src R
       foo[[2]][,2]
     #+end_src

     #+RESULTS:
     : [1]  TRUE FALSE FALSE
     
  2) retrieve the 2nd row, 1st column of the 2nd member of ~foo~
     #+begin_src R
       foo[[2]][2,1]
       foo[[2]][2]
     #+end_src

     #+RESULTS:
     : [1] TRUE
     : [1] TRUE
     
  3) retrieve elements 1 through 4 of the 2nd member of ~foo~
     #+begin_src R
       foo[[2]][1:4]
     #+end_src

     #+RESULTS:
     : [1] FALSE  TRUE  TRUE  TRUE
     : [1] TRUE

- Using double square brackets on a list is always interpreted with
  respect to a single member, for example:
  #+begin_src R
    foo[[c(2,3)]]
  #+end_src

  #+RESULTS:
  : [1] TRUE

- Using the ~-~ operator inside the single index brackets to remove:
  #+begin_src R
    foo[[2]]
    foo[[2]][-1]
    foo[[2]][-1,]
    foo[[2]][,-1]
  #+end_src

  #+RESULTS:
  #+begin_example
        [,1]  [,2]  [,3]
  [1,] FALSE  TRUE  TRUE
  [2,]  TRUE FALSE  TRUE
  [3,]  TRUE FALSE FALSE
  [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
       [,1]  [,2]  [,3]
  [1,] TRUE FALSE  TRUE
  [2,] TRUE FALSE FALSE
        [,1]  [,2]
  [1,]  TRUE  TRUE
  [2,] FALSE  TRUE
  [3,] FALSE FALSE
  #+end_example

- Preview: how would you extract the string member of ~foo~?
  #+begin_src R
    ## with a for loop
    char <- vector()
    for (member in foo) {
      char <- c(char,is.character(member))
    }
    char
    idx <- which(char==TRUE) # get the index
    foo[[idx]]  # index list

    ## with the lapply function
    char1 <- lapply(X=foo,FUN=is.character)
    unlist(char1)
    idx <- which(char1==TRUE) # get the index
    foo[[idx]]  # index list
  #+end_src

  #+RESULTS:
  : [1] FALSE FALSE  TRUE
  : [1] "don"     "quixote"
  :   SEQ   MAT   CHR 
  : FALSE FALSE  TRUE
  : [1] "don"     "quixote"

- The ~apply~ family of functions will be taught in advanced data
  science, including ~lapply~ (apply ~FUN~-ctions across a whole ~list~)

* Practice extracting from a ~list~

Solve the following extraction problems:
1) Extract the 1st member of ~foo~.
2) Extract the first and the last element of the 1st member of ~foo~.
3) Extract the elements of the 1st member of ~foo~ with odd indices.

#+begin_src R
    # first member of the list
    foo[[1]]
    # first and last element of the 1st member of foo
    foo[[1]][c(1,length(foo[[1]]))]
    # elements of the 1st member of foo with odd indices
    foo[[1]][seq(1,length(foo[[1]]), by=2)]
#+end_src

#+RESULTS:
:  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316 -0.6315789
: [10] -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895  2.7368421  3.1578947
: [19]  3.5789474  4.0000000
: [1] -4  4
:  [1] -4.0000000 -3.1578947 -2.3157895 -1.4736842 -0.6315789  0.2105263  1.0526316  1.8947368  2.7368421
: [10]  3.5789474

* Code along: Removing, overwriting and slicing a ~list~

- To overwrite a list member, use the assignment operator ~<-~
  #+begin_src R

  #+end_src

- Here, ~paste~ concatenates strings but can also be used for output:
  #+begin_src R

  #+end_src

- To remove a list member, overwrite it with ~NULL~ (like ~names~)
  #+begin_src R

  #+end_src

- /List slicing/ means selecting multiple list items at once:
  #+begin_src R

  #+end_src

- Note that the sliced list is itself a ~list~

* Naming lists

- List members can be /named/ just like vector or data frame elements

- A name is an R /attribute/. An unnamed list has none:
  #+begin_src R

  #+end_src

- Name the members of ~foo~ using ~names~, then print ~str(foo)~:
  #+begin_src R

  #+end_src

- You can now use the names to subset the list as usual:
  1) Print the ~matrix~ member of ~foo~.
  2) Print the 2nd column of the ~matrix~ member.
  3) Print the 2nd through 4th element of the ~logical~ member.
  #+begin_src R

  #+end_src

- Note that the ~names~ are stored as a ~character~ vector but not used
  with quotes. Also, you cannot use the names inside double brackets
  #+begin_src R

  #+end_src

- You can also name the list when creating it with ~list~:
  #+begin_src R

  #+end_src

* Practice naming lists

1) Make a safety copy ~np~ of ~p~
2) Name the elements of ~np~ in this order: ~num~, ~logmat~, ~char~
3) Display the structure of the named list ~p~
4) Remove the 2nd string of the 3rd member using its name
#+begin_src R

#+end_src
