#+title: Data frames, Factors, Lists
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2023
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: black
:END:
* What will you learn?
#+attr_html: :width 500px
[[../img/frame.jpg]]

- What is a data frame?
- How do you create data frames?
- How can you subset data frames?
- Factors: Orange juice or Vitamin C?
- What about lists?

* What is a data frame?

- A data frame is a *table* of one row for each data point
- A data frame consists of *vectors* of the same length
- The vectors can have *different* data types

* Example: creating data frames

- Create three vectors to put into the data frame
  1) the 1st uses the constant vector ~LETTERS~
  2) the 2nd uses the ~sample~ function to draw a sample from the first
  3) the 3rd is just a colon-generated vector of integers

- Extract the first three letters from =LETTERS= and store them in =L3=:
  #+name: letters
  #+begin_src R
    L3 <- LETTERS[1:3]   # create vector of capital letters
    L3
  #+end_src

  #+RESULTS: letters
  : [1] "A" "B" "C"

- Use =sample= to draw 10 letters from =L3=:
  #+name: sample
  #+begin_src R
    fac <- sample(x=L3,          # generate a sample from L3
                  size=10,       # draw 10 letters
                  replace=TRUE)  # with replacement
    fac
  #+end_src

  #+RESULTS: sample
  : [1] "B" "A" "C" "A" "B" "C" "C" "B" "C" "A"

- Create a data frame =df= from the number =1=, the vector =1:10=, and =fac=.
  #+name: dataframe_unnamed
  #+begin_src R
    df <- data.frame(1,1:10,fac) # create unnamed 10x3 data frame
    str(df)
  #+end_src

  #+RESULTS: dataframe_unnamed
  : 'data.frame':	10 obs. of  3 variables:
  :  $ X1   : num  1 1 1 1 1 1 1 1 1 1
  :  $ X1.10: int  1 2 3 4 5 6 7 8 9 10
  :  $ fac  : chr  "B" "A" "C" "A" ...

- Create a data frame =df2= with the same content but name the first
  column =x= and the second column =y=:
  #+name: dataframe_named
  #+begin_src R
    df2 <- data.frame("x"=1,"y"=1:10,fac) # data frame with named columns
    str(df2)  # check structure (explicitly named)
  #+end_src

  #+RESULTS: dataframe_named
  : 'data.frame':	10 obs. of  3 variables:
  :  $ x  : num  1 1 1 1 1 1 1 1 1 1
  :  $ y  : int  1 2 3 4 5 6 7 8 9 10
  :  $ fac: chr  "B" "A" "C" "A" ...

- More information: check out ~example(data.frame)~

* Functions to test data structures

- Check if =df2= is a: vector, matrix, list, data frame:
  #+begin_src R :session :results output
    is.vector(df2)
    is.matrix(df2)
    is.list(df2)
    is.data.frame(df2)
  #+end_src

  #+RESULTS:
  : [1] FALSE
  : [1] FALSE
  : [1] TRUE
  : [1] TRUE

- Surprise: data frames are special [rectangular] lists

- Can a data frame contain a data frame? Test this by trying to add =df=
  to =df2=:
  #+begin_src R
    str(df2)
    str(data.frame(df,df2))
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame':	10 obs. of  3 variables:
   $ x  : num  1 1 1 1 1 1 1 1 1 1
   $ y  : int  1 2 3 4 5 6 7 8 9 10
   $ fac: chr  "B" "A" "C" "A" ...
  'data.frame':	10 obs. of  6 variables:
   $ X1   : num  1 1 1 1 1 1 1 1 1 1
   $ X1.10: int  1 2 3 4 5 6 7 8 9 10
   $ fac  : chr  "B" "A" "C" "A" ...
   $ x    : num  1 1 1 1 1 1 1 1 1 1
   $ y    : int  1 2 3 4 5 6 7 8 9 10
   $ fac.1: chr  "B" "A" "C" "A" ...
  #+end_example

** Practice

- Create the data frame shown [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][in this figure]], and name it =df=.
  #+name: 1
  #+caption: data frame example (source: guru99.com)
  [[../img/7_df.png]]

** Solution

- Define vectors with ~c()~
- Create data frame with ~data.frame()~
- You can rename columns with ~colnames()~
- You can auto-convert ~character~ to ~factor~

#+begin_src R :session :results output
  ## define vectors
  ID <- c(10,20,30,40) # numeric integer vector
  items <- c("book","pen","textbook","pencil_case") # character vector
  store <- c(TRUE,FALSE,TRUE,FALSE) # logical vector
  price <- c(2.5,8.0,10.0,7.0)  # numeric double vector

  ## create data frame and properties
  df <- data.frame(ID,items,store,price)
  df
  rownames(df)   # row names (auto-created)
  colnames(df)   # column names
  str(df)        # data frame structure

  ## auto-convert characters to factors
  df_fac <- data.frame(ID,items,store,price,
                       stringsAsFactors = TRUE )
  str(df_fac)
#+end_src

#+RESULTS:
#+begin_example
ID       items store price
1 10        book  TRUE   2.5
2 20         pen FALSE   8.0
3 30    textbook  TRUE  10.0
4 40 pencil_case FALSE   7.0
[1] "1" "2" "3" "4"
[1] "ID"    "items" "store" "price"
'data.frame':	4 obs. of  4 variables:
 $ ID   : num  10 20 30 40
 $ items: chr  "book" "pen" "textbook" "pencil_case"
 $ store: logi  TRUE FALSE TRUE FALSE
 $ price: num  2.5 8 10 7
'data.frame':	4 obs. of  4 variables:
 $ ID   : num  10 20 30 40
 $ items: Factor w/ 4 levels "book","pen","pencil_case",..: 1 2 4 3
 $ store: logi  TRUE FALSE TRUE FALSE
 $ price: num  2.5 8 10 7
#+end_example

* Select subsets using index operators

- Use the dataframe =df= [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][shown here]] that you created earlier.

- Select subsets using the index operators ~$~ and ~[]~:
  1) Select rows 1 to 2 using ~[]~
     #+begin_src R
       df[1:2,] # rows 1-2, all columns
    #+end_src

    #+RESULTS:
    :   ID items store price
    : 1 10  book  TRUE   2.5
    : 2 20   pen FALSE   8.0

  2) Select column 1 using ~[]~ and ~$~
     #+begin_src R
       df$ID
       df$"ID"
       df[,1]
       df[,"ID"]
     #+end_src

     #+RESULTS:
     : [1] 10 20 30 40
     : [1] 10 20 30 40
     : [1] 10 20 30 40
     : [1] 10 20 30 40
     
  3) Select row 3 of column 2  using ~[]~ and ~$~
     #+begin_src R
       df[3,2]
       df$items[3]
     #+end_src

     #+RESULTS:
     : [1] "textbook"
     : [1] "textbook"

  4) Select rows 1 to 3 in columns 3 and 4 using ~[]~
     #+begin_src R
       df[1:3,3:4]
     #+end_src

     #+RESULTS:
     :   store price
     : 1  TRUE   2.5
     : 2 FALSE   8.0
     : 3  TRUE  10.0

  5) Select rows 2 to 3, and columns 1 and 4 using ~[]~
     #+begin_src R
       df[2:3,c(1,4)]
       df[c(2,3), c("ID","price")]
     #+end_src

     #+RESULTS:
     :   ID price
     : 2 20     8
     : 3 30    10
     :   ID price
     : 2 20     8
     : 3 30    10

- [[https://github.com/birkenkrahe/ds1/blob/main/img/7_subset.png][Solutions illustrated (GitHub)]]

* Select indices and values using ~which~, ~names~, ~%in%~

Select data frame indices using functions ~which~, ~colnames~ and ~%in%~:
1) Print the column index for the column ~price~ using ~colnames~
2) Store the row index for ~textbook~ in ~idx~
3) Print the entry ~textbook~ using ~idx~
4) Check if ~pencil_case~ is a store item using ~%in%~

For the last question, the format of the ~%in%~ matching function to
find a string is: ~string %in% vector~

#+begin_src R
  which(colnames(df)=="price")
  rownames(df)
  which(df$items=="textbook") -> idx
  df$items[idx]
  "pencil_case" %in% df$items
#+end_src

#+RESULTS:
: [1] 4
: [1] "1" "2" "3" "4"
: [1] "textbook"
: [1] TRUE

* Select subsets using the ~subset~ function

Using ~subset~,
1) Select product IDs above 20
   #+begin_src R
     subset(df, ID > 20, select=c("ID","items"))
   #+end_src

   #+RESULTS:
   :   ID       items
   : 3 30    textbook
   : 4 40 pencil_case

2) Select all books listed in the table:
   #+begin_src R
     subset(df, grepl("book",items), "items")
     df[grepl("book", df$items), "items"]     
   #+end_src
   
   #+RESULTS:
   :      items
   : 1     book
   : 3 textbook
   : [1] "book"     "textbook"

3) Select all items cheaper than $11 and in stock
#+begin_src R
  subset(df, (price < 11) & (store==TRUE))
#+end_src

#+RESULTS:
:   ID    items store price
: 1 10     book  TRUE   2.5
: 3 30 textbook  TRUE  10.0

- =subset= syntax reminder:
  #+begin_src R
    ## subset( target df, filter FUN, select COL)
    ##str(airquality)
    ##subset(airquality, Temp>80, select=c(Ozone,Temp)) |> head(4)
    subset(airquality, Day==1, select= -c(Temp,Solar.R))
  #+end_src

  #+RESULTS:
  : Ozone Wind Month Day
  : 1      41  7.4     5   1
  : 32     NA  8.6     6   1
  : 62    135  4.1     7   1
  : 93     39  6.9     8   1
  : 124    96  6.9     9   1

* Some useful functions

- ~dim~ gives you the data frame dimensions
  #+begin_src R
    dim(df)
  #+end_src

  #+RESULTS:
  : [1] 4 4

- ~nrow~ gives you the number of rows
  #+begin_src R
    nrow(df)
  #+end_src

  #+RESULTS:
  : [1] 4

- ~ncol~ gives you the number of columns
  #+begin_src R
    ncol(df)
  #+end_src

  #+RESULTS:
  : [1] 4

- ~head(x=,N)~ gives you the first ~N~ rows
  #+begin_src R
    head(df,3)
  #+end_src

  #+RESULTS:
  :   ID    items store price
  : 1 10     book  TRUE   2.5
  : 2 20      pen FALSE   8.0
  : 3 30 textbook  TRUE  10.0

- ~order~ gives you the indices of an ordered vector
  #+begin_src R
    order(df$items)
    df$items
    sort(df$items)
  #+end_src

  #+RESULTS:
  : [1] 1 2 4 3
  : [1] "book"        "pen"         "textbook"    "pencil_case"
  : [1] "book"        "pen"         "pencil_case" "textbook"

- ~subset~ gives you a subset of any data structure
  #+begin_src R
    subset(airquality, Temp > 80, select = c(Ozone, Temp)) |> head(n=4)
    subset(airquality, Day == 1, select = -Temp)
    subset(airquality, select = Ozone:Wind)
  #+end_src

- Examples
  #+begin_src R :session :results output
    dim(df)          # dimension of df
    nrow(df)         # no. of rows
    ncol(df)         # no. of columns

    dim(tg)          # dimension of tg
    nrow(tg)         # no. of rows
    ncol(tg)         # no. of columns
    head(tg$len,10)  # first 10 lines of vector

    order(head(tg$len)) # order and print indices

    ## print ordered vector
    tg$len[order(head(tg$len))]
    tg$len[order(head(tg$len), decreasing = TRUE)]

    ## ?subset: type out the 'airquality' examples
    subset(airquality, Temp > 80, select = c(Ozone, Temp)) |> head()
    subset(airquality, Day == 1, select = -Temp)
    subset(airquality, select = Ozone:Wind)
  #+end_src

* Trying to create a non-rectangular data frame

- Try to create a not rectangular data frame
- Define vectors of different length
- Combine them using ~data.frame~
- [[https://github.com/birkenkrahe/ds1/blob/main/img/7_challenge.png][This image]] shows what's going on (for two vectors)

*** Solution

#+begin_src R :session :results output
  ## the longer vector is an even multiple of the shorter one
  data.frame(x1=c("moo","meh"),x2=1:4)

  ## the longer vector is an odd multiple of the shorter one
  data.frame(x1=c("moo","meh"),x2=1:3)
#+end_src

#+RESULTS:
: x1 x2
: 1 moo  1
: 2 meh  2
: 3 moo  3
: 4 meh  4
: Error in data.frame(x1 = c("moo", "meh"), x2 = 1:3) : 
:   arguments imply differing number of rows: 2, 3

#+name: 3
#+attr_latex: :width 400px
#+caption: element-wise vector operation
[[../img/7_challenge.png]]

* Extracting information from a data frame

- Use the dataset ~ToothGrowth~ (aka ~tg~)
- Find the number of cases in which tooth length is less
  than 5. Expected output: =10.0  8.2  9.4  9.7 14.5=

  #+begin_src R :session :results output
    tg <- ToothGrowth
    ## create index vector for observations with tooth length < 16
    small <- tg$len < 5

    ## look at the result - surprised?
    head(small)    # print first few vector elements
    sum(small)     # number of teeth of length < 5
    length(small)  # some teeth are greater than 5

    ## print the tooth length values
    tg$len[small]  # tg[small] won't work here - why not?
    tg[,"len"][small]  # this will also work
  #+end_src

  #+RESULTS:
  : [1]  TRUE FALSE FALSE FALSE FALSE FALSE
  : [1] 1
  : [1] 60
  : [1] 4.2
  : [1] 4.2

* Extract factor levels from a data frame

- What's the class of ~tg$supp~?
- What're the levels of ~tg$supp~?
- We want to compare ~mean~ tooth length for each ~level~

#+begin_src R :session :results output

  class(tg$supp)   # class check
  levels(tg$supp)  # levels check

  ## select the rows for each level
  tgoj <- tg[tg$supp == 'OJ',]  # Orange Juice
  tgvc <- tg[tg$supp == 'VC',]  # Vitamin C

  ## compute the mean over all selected rows
  mean(tgoj$len)
  mean(tgvc$len)
#+end_src

#+RESULTS:
: [1] "factor"
: [1] "OJ" "VC"
: [1] 20.66333
: [1] 16.96333

- ~tg[tg$supp == 'OJ',]~ is loaded with meaning:
  1) ~[i,j]~: select row ~i~, column ~j~
  2) ~i~ can be a vector (several rows)
  3) ~j~ can be a vector (several columns)
  4) If either is missing: take all rows or columns
  5) ~==~ produces logical values
  6) ~TRUE~ means "take it", ~FALSE~ means "skip it"
     
  #+begin_quote
  ~tg[tg$supp == 'OJ', ]~ says:

  "Find which elements of the ~tg$supp~ vector equal ~'OJ'~ and
  extract the corresponding rows of ~tg~."

  = "Take from tg the rows in which the supplement was ~OJ~."

  Notice that ~tgoj~, ~tgvc~ are also still data frames.
  #+end_quote

* What about lists?

- Data frames (and ~data.table~) are really lists
- Subsetting: same ol', same ol' (with ~[[]]~)
- Create lists with ~list~

Examples:

1) Check the object and storage type of =mtcars=
   #+begin_src R
     class(mtcars)   # object class of data frame
     typeof(mtcars)  # type or storage mode of data frame
   #+end_src

   #+RESULTS:
   : [1] "data.frame"
   : [1] "list"

2) Extract the first element of the =mpg= vector of =mtcars=:
   - Using the accessor operator =$=
   - Using only the =[]= operator for a =list=

   #+begin_src R
     mtcars$mpg[1]
     mtcars[[1]][1]
   #+end_src

   #+RESULTS:
   : [1] 21
   : [1] 21

3) Check that both expressions are =identical=.

   #+begin_src R
     ## subsetting a data frame as a list
     identical(mtcars$mpg[1], mtcars[[1]][1])
   #+end_src

   #+RESULTS:
   : [1] TRUE

4) Create a =list= from =mtcars= and check its storage type.

   #+begin_src R
     ## create mtcars list (and add any other information)
     mtcars_list <- list(mtcars)
     typeof(mtcars_list)
   #+end_src

   #+RESULTS:
   : [1] "list"

* Concept summary

- A data frame is a table of one row for each data point
- A data frame consists of vectors of the same length
- You can change row and column names
- You can convert ~character~ into ~factor~ vectors
- You can subset data frames using ~[]~ or ~$~ operators
- You can run R scripts from the command line (e.g. ~Rscript~)
- You can plot to file (e.g. using ~ggsave~)

* Code summary

| ~library~         | load package                   |
| ~data~            | load dataset                   |
| ~str(df)~         | structure of data frame ~df~   |
| ~dslabs::murders~ | data set ~murders~ in ~dslabs~ |
| ~Rscript~         | run R on script ~.R~           |
| ~R CMD BATCH~     | execute R as batch command     |
| ~ls~, ~cat~       | (linux) shell commands         |
| ~littler~         | R script program package       |
| ~data.frame~      | create data frame              |
| ~example~         | show examples of function      |
| ~LETTERS~         | pre-stored alphabet (caps)     |
| ~sample~          | generate sample from vector    |
| ~is.vector~       | test for vector                |
| ~is.matrix~       | test for matrix                |
| ~is.data.frame~   | test for data frame            |
| ~is.list~         | test for list                  |
| ~rownames~        | get/set row names              |
| ~colnames~        | get/set column names           |
| ~$~               | access named vector            |
| ~[]~              | select index values            |
| ~mean~            | compute mean (1 argument)      |
| ~length~          | compute vector length          |
| ~identical~       | check equality (2 arguments)   |
| ~max~             | find maximum value             |
| ~dim~             | dimensions of object           |
| ~nrow~, ~ncol~    | number of rols, columns        |
| ~head~            | top lines (default: 6)         |
| ~order~           | order vector, print indices    |
| ~subset~          | select subset                  |
| ~list~            | make list                      |
| ~factor~          | turn vector into factor vector |

* References

Matloff N (2019). fasteR: Fast Lane to Learning R! [[https://github.com/matloff/fasteR#--on-to-data-frames][Online: github]]
