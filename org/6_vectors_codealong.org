#+TITLE: VECTORS in R - Sequencing, Indexing, and Naming
#+AUTHOR: Introduction to data science (DSC 105) Fall 2024
#+startup: hideblocks indent overview inlineimages entitiespretty
#+PROPERTY: header-args:R :results output :session *R* :exports both :noweb yes
#+options: toc:1
* Creating sequences and repetitions [[https://youtu.be/G2P_MVq3eyM][(video)]]

You can create vectors using the =seq= and =rep= commands. This is
especially useful when plotting, and when analyzing data frames.

Example: Subsetting a data frame at regular intervals
#+begin_src R
  df <- data.frame(
    id = 1:10,
    value = c(10, 20, 15, 30, 25, 35, 40, 45, 50, 55)
  )
  df
  subset_df <- df[seq(1,nrow(df), by=2), ] # every 2nd row, all columns
  subset_df
#+end_src

#+RESULTS:
#+begin_example
   id value
1   1    10
2   2    20
3   3    15
4   4    30
5   5    25
6   6    35
7   7    40
8   8    45
9   9    50
10 10    55
  id value
1  1    10
3  3    15
5  5    25
7  7    40
9  9    50
#+end_example

* The colon ~:~ operator

- ~1:n~ creates a sequence of numbers separated by intervals of 1
  #+begin_src R
    3:21 -> foo
    foo
  #+end_src

  #+RESULTS:
  :  [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21

- Check what type of R object you have created with these functions:
  + ~class~ (R object class),
  + ~mode~ (R object storage mode)
  + ~is.vector~ (R vector check)
  #+begin_src R
    class(foo)
    mode(foo)
    is.vector(foo)
  #+end_src

  #+RESULTS:
  : [1] "integer"
  : [1] "numeric"
  : [1] TRUE

- Sequences created this way can also be stored:
  1. Store 5.3 in =foo=
  2. Store =foo:10= in =bar=
  3. Show =bar=
  #+begin_src R
    5.3 -> foo
    foo:10 -> bar
    bar
  #+end_src

  #+RESULTS:
  : [1] 5.3 6.3 7.3 8.3 9.3

- What happens if the first argument of ~:~ is smaller than the second?
  Create a sequence with =:= from 10 to =foo= and save it in =baz=
  #+begin_src R
    -10:foo -> baz
    baz
  #+end_src

  #+RESULTS:
  :  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5

- You can perform computations to specify the range.
  #+begin_src R
    options(width=70)
    foo:(-47+1.5)
    -47+1.5  # the right boundary is outside of the colon vector's range
  #+end_src

  #+RESULTS:
  : [1] -45.5
  :  [1]   5.3   4.3   3.3   2.3   1.3   0.3  -0.7  -1.7  -2.7  -3.7  -4.7
  : [12]  -5.7  -6.7  -7.7  -8.7  -9.7 -10.7 -11.7 -12.7 -13.7 -14.7 -15.7
  : [23] -16.7 -17.7 -18.7 -19.7 -20.7 -21.7 -22.7 -23.7 -24.7 -25.7 -26.7
  : [34] -27.7 -28.7 -29.7 -30.7 -31.7 -32.7 -33.7 -34.7 -35.7 -36.7 -37.7
  : [45] -38.7 -39.7 -40.7 -41.7 -42.7 -43.7 -44.7

- Try to understand the starting and ending values of the sequence you
  just generated.

* Weird histogram

- The following code creates a weird histogram:
  #+begin_src R :results output graphics file :file colonhist.png
    hist(1:10, breaks=10) # 10-point histogram with binwidth 10
  #+end_src

  #+RESULTS:
  [[file:colonhist.png]]

- What can you do to see the proper distribution with breaks at every
  number (all bars should have height 1)? See below for the solution.

* Sequences

The function ~seq~ allows modifying the step-width with ~by~:
#+begin_src R
  seq(from=3,to=27,by=3)
#+end_src

#+RESULTS:
: [1]  3  6  9 12 15 18 21 24 27

~seq~ always starts at ~from~ but not always end on ~to~:
#+begin_src R
  seq(from=1,to=10,by=2)  # even range even stepsize
  seq(from=1,to=11,by=2)  # odd range, even stepsize
#+end_src

#+RESULTS:
: [1] 1 3 5 7 9
: [1]  1  3  5  7  9 11

To end exactly on the last value, use ~length.out~:
#+begin_src R
  seq(from=1,to=10,length.out=10)
  seq(from=3,to=27,length.out=40)
#+end_src

#+RESULTS:
:  [1]  1  2  3  4  5  6  7  8  9 10
:  [1]  3.000000  3.615385  4.230769  4.846154  5.461538  6.076923
:  [7]  6.692308  7.307692  7.923077  8.538462  9.153846  9.769231
: [13] 10.384615 11.000000 11.615385 12.230769 12.846154 13.461538
: [19] 14.076923 14.692308 15.307692 15.923077 16.538462 17.153846
: [25] 17.769231 18.384615 19.000000 19.615385 20.230769 20.846154
: [31] 21.461538 22.076923 22.692308 23.307692 23.923077 24.538462
: [37] 25.153846 25.769231 26.384615 27.000000

What is the step-width in the last case? Compute it and use it
to create a sequence of 40 numbers from 3 to 27 exactly, with ~seq~.
#+begin_src R
  seq(from=3,to=27,length.out=40) -> s
  s[2]-s[1]
  seq(from=3,to=27,by=s[2]-s[1])
#+end_src

#+RESULTS:
: [1] 0.6153846
:  [1]  3.000000  3.615385  4.230769  4.846154  5.461538  6.076923
:  [7]  6.692308  7.307692  7.923077  8.538462  9.153846  9.769231
: [13] 10.384615 11.000000 11.615385 12.230769 12.846154 13.461538
: [19] 14.076923 14.692308 15.307692 15.923077 16.538462 17.153846
: [25] 17.769231 18.384615 19.000000 19.615385 20.230769 20.846154
: [31] 21.461538 22.076923 22.692308 23.307692 23.923077 24.538462
: [37] 25.153846 25.769231 26.384615 27.000000

Create a decreasing sequence of length 5 from 5 to -5. Use
~length.out~ first, then use ~by~ to achieve the same result.
#+begin_src R
  seq(from=5,to=-5,length.out=5)
  seq(from=5,to=-5,by=-2.5)  
#+end_src

#+RESULTS:
: [1]  5.0  2.5  0.0 -2.5 -5.0
: [1]  5.0  2.5  0.0 -2.5 -5.0

* Solution: odd histogram with colon op =:=

When creating a histogram of the vector ~1:10~ with binwidth 10, the
resulting graph looks wrong:
#+begin_src R :results output graphics file :file colonhist.png
  hist(1:10,breaks=10)
#+end_src

#+RESULTS:
[[file:colonhist.png]]

Fix it using =seq= with the =length.out= parameter:
#+begin_src R :results output graphics file :file colonhist2.png
  hist(x=1:10, # data
       breaks=seq(from=1,  # binwidth
                  to=10,   
                  length.out=11))
#+end_src

#+RESULTS:
[[file:colonhist2.png]]

* Repetition

- Use ~rep~ to repeat a value, e.g. the number 1, four times:
  #+begin_src R
    rep(x=1, times=4)
    rep(1,4)    
  #+end_src

  #+RESULTS:
  : [1] 1 1 1 1
  : [1] 1 1 1 1

- You can repeat any R object, e.g. the vector ~c(3, 62, 8, 3)~, or the
  scalar ~foo~, or an arbitrary arithmetic expression:
  #+begin_src R
    rep(x=c(3,62,8,3),times=3)
    rep(x=foo,times=2)
    rep(x=2*2, times=(foo*2))
  #+end_src

  #+RESULTS:
  :  [1]  3 62  8  3  3 62  8  3  3 62  8  3
  : [1] 5.3 5.3
  :  [1] 4 4 4 4 4 4 4 4 4 4

- The ~each~ argument of ~rep(x)~ says how many times each element of ~x~ is
  repeated:
  #+begin_src R :session :results output
    rep(x=c(3,62),times=3)
    rep(x=c(3,62),each=2)
    rep(x=c(3,62), each=2, times=3)        
  #+end_src

  #+RESULTS:
  : [1]  3 62  3 62  3 62
  : [1]  3  3 62 62
  :  [1]  3  3 62 62  3  3 62 62  3  3 62 62

- The default of ~times~ and ~each~ is ~1~. What is ~rep(c(3,62))~ ?
  #+begin_src R
    rep(c(3,62))  # same as times=1, each=1
  #+end_src

  #+RESULTS:
  : [1]  3 62

- As with ~seq~, you can include the result of ~rep~ in a vector of the
  same data type (e.g. ~numeric~):
  #+begin_src R
    foo <- 4
    c(3,8.3, rep(x=32,times=foo),seq(from=-2,to=1,length.out=foo+1))
  #+end_src

  #+RESULTS:
  :  [1]  3.00  8.30 32.00 32.00 32.00 32.00 -2.00 -1.25 -0.50  0.25  1.00

* Repetition with characters

- ~rep~ also works for characters and character vectors:
  #+begin_src R
    rep("data science", times=2)
    rep(c("data", "science"), times=2)
    rep(c("data", "science"), times=2,each=2)
  #+end_src

  #+RESULTS:
  : [1] "data science" "data science"
  : [1] "data"    "science" "data"    "science"
  : [1] "data"    "data"    "science" "science" "data"    "data"   
  : [7] "science" "science"

- What happens if you try to mix characters, numbers, Booleans?
  Repeat an expression that has all three data types in it.
  #+begin_src R
    rep(c("data", 1, TRUE), times=2) -> result
    result
    class(result)
  #+end_src

  #+RESULTS:
  : [1] "data" "1"    "TRUE" "data" "1"    "TRUE"
  : [1] "character"

* Sorting and measuring lengths [[https://youtu.be/KRghGmuS6Ck][(video)]]

An important part of working with vectors is sorting vector elements
and measuring vector lengths.

* Sorting vector elements

- /Sorting/ is important because we don't care about memory locations

- ~sort(x)~ arranges the elements of x according to size

- The default order is ascending, or ~decreasing = FALSE~
  #+begin_src R
    c(2.5, -1, -10, 3.44) -> x
    x
    sort(x)   # default is decreasing = FALSE or ascending
    sort(x,decreasing=TRUE)
  #+end_src

  #+RESULTS:
  : [1]   2.50  -1.00 -10.00   3.44
  : [1] -10.00  -1.00   2.50   3.44
  : [1]   3.44   2.50  -1.00 -10.00

- Special values are removed, put last or first with ~na.last~. This
  works for all special values - ~NA~, ~NaN~ and ~Inf~.
  #+begin_src R
    sort(c(x,NA),na.last=NA)
  #+end_src

  #+RESULTS:
  : [1] -10.00  -1.00   2.50   3.44

- Remember that ~NA~ is a ~logical~ object. How can you check that?
  #+begin_src R
    class(NA)
  #+end_src

  #+RESULTS:
  : [1] "logical"

* Length of vectors

- The ~length~ function gets or sets the length of vectors:
  #+begin_src R
    length(x)
    x |> length()
  #+end_src

  #+RESULTS:
  : [1] 4
  : [1] 4

- Is =length= generic? Does =mtcars= have a =length=?  
  #+begin_src R
    methods(length)
    length(mtcars)
  #+end_src

  #+RESULTS:
  : [1] length.POSIXlt
  : see '?methods' for accessing help and source code
  : [1] 11

- If you have functions inside the object definition, ~length~ gives you
  the number of entries /after/ the inner functions have been executed:
  #+begin_src R
    length(c(3,8.3, rep(x=32,times=foo),seq(from=-2,to=1,length.out=foo+1)))
  #+end_src

  #+RESULTS:
  : [1] 11

- R's display options are stored in ~options()~, which is a
  ~list~. Lists have a length like options. How many options does
  ~options()~ have?
  #+begin_src R
    length(options())
    length(par())    
  #+end_src

  #+RESULTS:
  : [1] 69
  : [1] 72

* Naming vectors

- Naming vector elements makes code more readable.
  #+begin_src R :session

  #+end_src
- Or you can name elements explicitly using the function ~names~:
  #+begin_src R :session

  #+end_src
- Looking under the hood of ~names~:
  #+begin_src R :session

  #+end_src

* Length of ~names~ vs. vector

- What if your names are too short (or too long) for your vector?

- Define a vector ~week~ whose elements are the names of weekdays
  #+begin_src R

  #+end_src

- Define a vector ~foo~ that contains seven numbers, and name its
  elements according to the ~week~.
  #+begin_src R

  #+end_src

- Copy ~week~ to ~workweek~, and remove ~"Saturday"~ and ~"Sunday"~ from the
  ~workweek~.
  #+begin_src R

  #+end_src

- Copy ~foo~ to ~bar~, and overwrite ~names(bar)~ with ~workweek~.
  #+begin_src R results output

  #+end_src

* Indexing vectors

- Passing a vector of positive numbers returns the slice of the
  vector containing the elements at those locations.
  #+begin_src R

  #+end_src

- Passing a vector of negative numbers returns the slice of the vector
  containing the elements everywhere except at those locations.
  #+begin_src R

  #+end_src

- Passing a logical vector returns the slice of the vector containing
  the elements where the index is ~TRUE~.
  #+begin_src R

  #+end_src

- For named vectors, passing a character vector of names returns the
  slice of the vector containing the elements with those names.
  #+begin_src R

  #+end_src

* Coercion

- All vector elements have to be of the same ~class~ or type

- When you try to mix them, R will create vectores with "coercion":
  #+begin_src R

  #+end_src

- Missing values ~NA~ are not coerced to ~character~ (e.g. ~"NA"~) because
  this would mean altering their main property, to be missing.

- Still, the whole vector is a ~character~ vector object:
  #+begin_src R

  #+end_src

- You can also explicitly convert elements using the functions
  ~as.character~, ~as.logical~ or ~as.numeric~.
  #+begin_src R

  #+end_src

- Conversion with ~as.logical~ has a surprise: any non-zero number is
  turned into ~TRUE~ if the vector is ~numeric~.
  #+begin_src R

  #+end_src

- The lesson: don't mix data types in vectors if you can avoid it!

