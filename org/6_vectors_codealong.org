#+TITLE: VECTORS in R - Sequencing, Indexing, and Naming
#+AUTHOR: Introduction to data science (DSC 105) Fall 2024
#+startup: hideblocks indent overview inlineimages entitiespretty
#+PROPERTY: header-args:R :results output :session *R* :exports both :noweb yes
#+options: toc:1
* Creating sequences and repetitions [[https://youtu.be/G2P_MVq3eyM][(video)]]

You can create vectors using the =seq= and =rep= commands. This is
especially useful when plotting, and when analyzing data frames.

Example: Subsetting a data frame at regular intervals
#+begin_src R
  df <- data.frame(
    id = 1:10,
    value = c(10, 20, 15, 30, 25, 35, 40, 45, 50, 55)
  )

  
#+end_src

* The colon ~:~ operator

- ~1:n~ creates a sequence of numbers separated by intervals of 1
  #+begin_src R

  #+end_src

- Check what type of R object you have created with these functions:
  + ~class~ (R object class),
  + ~mode~ (R object storage mode)
  + ~is.vector~ (R vector check)
  #+begin_src R

  #+end_src

- Sequences created this way can also be stored:
  1. Store 5.3 in =foo=
  2. Store =foo:10= in =bar=
  3. Show =bar=
  #+begin_src R

  #+end_src

- What happens if the first argument of ~:~ is smaller than the second?
  Create a sequence with =:= from 10 to =foo= and save it in =x=
  #+begin_src R

  #+end_src

- You can perform computations to specify the range.
  #+begin_src R

  #+end_src

- Try to understand the starting and ending values of the sequence you
  just generated.

* Weird histogram

- The following code creates a weird histogram:
  #+begin_src R :results output graphics file :file colonhist.png

  #+end_src

- What can you do to see the proper distribution with breaks at every
  number (all bars should have height 1)? See below for the solution.

* Sequences

The function ~seq~ allows modifying the step-width with ~by~:
#+begin_src R

#+end_src

~seq~ always starts at ~from~ but not always end on ~to~:
#+begin_src R

#+end_src

To end exactly on the last value, use ~length.out~:
#+begin_src R

#+end_src

What is the step-width in the last case? Compute it and use it
to create a sequence of 40 numbers from 3 to 27 exactly, with ~seq~.
#+begin_src R

#+end_src

Create a decreasing sequence of length 5 from 5 to -5. Use
~length.out~ first, then use ~by~ to achieve the same result.
#+begin_src R

#+end_src

* Solution: odd histogram with colon op =:=

When creating a histogram of the vector ~1:10~ with binwidth 10, the
resulting graph looks wrong:
#+begin_src R :results output graphics file :file colonhist.png

#+end_src

Fix it using =seq= with the =length.out= parameter:
#+begin_src R :results output graphics file :file colonhist2.png

#+end_src

* Repetition

- Use ~rep~ to repeat a value, e.g. the number 1, four times:
  #+begin_src R

  #+end_src
- You can repeat any R object, e.g. the vector ~c(3, 62, 8, 3)~, or the
  scalar ~foo~, or an arbitrary arithmetic expression:
  #+begin_src R

  #+end_src
- The ~each~ argument of ~rep(x)~ says how many times each element of ~x~ is
  repeated:
  #+begin_src R :session :results output

  #+end_src

- The default of ~times~ and ~each~ is ~1~. What is ~rep(c(3,62))~ ?
  #+begin_src R

  #+end_src

- As with ~seq~, you can include the result of ~rep~ in a vector of the
  same data type (e.g. ~numeric~):
  #+begin_src R

  #+end_src

* Repetition with characters

- ~rep~ also works for characters and character vectors:
  #+begin_src R

  #+end_src

- What happens if you try to mix characters, numbers, Booleans?
  Repeat an expression that has all three data types in it.
  #+begin_src R

  #+end_src

* Sorting and measuring lengths [[https://youtu.be/KRghGmuS6Ck][(video)]]

An important part of working with vectors is sorting vector elements
and measuring vector lengths.

* Sorting vector elements

- /Sorting/ is important because we don't care about memory locations

- ~sort(x)~ arranges the elements of x according to size

- The default order is ascending, or ~decreasing = FALSE~
  #+begin_src R

  #+end_src

- Special values are removed, put last or first with ~na.last~. This
  works for all special values - ~NA~, ~NaN~ and ~Inf~.
  #+begin_src R

  #+end_src

- Remember that ~NA~ is a ~logical~ object. How can you check that?
  #+begin_src R

  #+end_src

* Length of vectors

- The ~length~ function gets or sets the length of vectors:
  #+begin_src R

  #+end_src

- Is =length= generic? Does =mtcars= have a =length=?  
  #+begin_src R

  #+end_src

- If you have functions inside the object definition, ~length~ gives you
  the number of entries /after/ the inner functions have been executed:
  #+begin_src R

  #+end_src

- R's display options are stored in ~options()~, which is a
  ~list~. Lists have a length like options. How many options does
  ~options()~ have?
  #+begin_src R

  #+end_src

* Naming vectors

- Naming vector elements makes code more readable.
  #+begin_src R :session

  #+end_src
- Or you can name elements explicitly using the function ~names~:
  #+begin_src R :session

  #+end_src
- Looking under the hood of ~names~:
  #+begin_src R :session

  #+end_src

* Length of ~names~ vs. vector

- What if your names are too short (or too long) for your vector?

- Define a vector ~week~ whose elements are the names of weekdays
  #+begin_src R

  #+end_src

- Define a vector ~foo~ that contains seven numbers, and name its
  elements according to the ~week~.
  #+begin_src R

  #+end_src

- Copy ~week~ to ~workweek~, and remove ~"Saturday"~ and ~"Sunday"~ from the
  ~workweek~.
  #+begin_src R

  #+end_src

- Copy ~foo~ to ~bar~, and overwrite ~names(bar)~ with ~workweek~.
  #+begin_src R results output

  #+end_src

* Indexing vectors

- Passing a vector of positive numbers returns the slice of the
  vector containing the elements at those locations.
  #+begin_src R

  #+end_src

- Passing a vector of negative numbers returns the slice of the vector
  containing the elements everywhere except at those locations.
  #+begin_src R

  #+end_src

- Passing a logical vector returns the slice of the vector containing
  the elements where the index is ~TRUE~.
  #+begin_src R

  #+end_src

- For named vectors, passing a character vector of names returns the
  slice of the vector containing the elements with those names.
  #+begin_src R

  #+end_src

* Coercion

- All vector elements have to be of the same ~class~ or type

- When you try to mix them, R will create vectores with "coercion":
  #+begin_src R

  #+end_src

- Missing values ~NA~ are not coerced to ~character~ (e.g. ~"NA"~) because
  this would mean altering their main property, to be missing.

- Still, the whole vector is a ~character~ vector object:
  #+begin_src R

  #+end_src

- You can also explicitly convert elements using the functions
  ~as.character~, ~as.logical~ or ~as.numeric~.
  #+begin_src R

  #+end_src

- Conversion with ~as.logical~ has a surprise: any non-zero number is
  turned into ~TRUE~ if the vector is ~numeric~.
  #+begin_src R

  #+end_src

- The lesson: don't mix data types in vectors if you can avoid it!

