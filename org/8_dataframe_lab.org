#+TITLE: Review Data Frames
#+AUTHOR: [YourName]
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2024
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:R :session *R* :results output
* README

- Review of the DataCamp chapter "Data frames" in the "Introduction to
  R" online course plus some drilling exercises.
- Upload the file to Canvas after completion

* What is a data

What is a data frame?

#+begin_quote
A =data.frame= is ...
#+end_quote

* Creating a data frame of numeric values (numbers)

How can you create a data frame of two vectors with values ~1 2 3 4
5 6 7 8 9 10~? What are the properties of this data frame?

#+begin_src R

#+end_src

* Creating a data frame from survey data

1) You've bought a new car. The car company sends you a survey. What
   kind of variables and corresponding data types do you expect?

   List them here alongside the information necessary to put them into
   a data frame. Example features: for a house survey

   #+begin_example
   - Year of build: `character`, e.g. 1905
   - For sale: `logical`, e.g. TRUE
   - Name of owner: `character`, e.g. Smith
   - Price of house: `numeric`, e.g. $100,000
   - Size of house: `factor, e.g. medium
   #+end_example

   Now create a list for the car company survey - make sure that all
   basic data types are represented, and that at least one of them is
   an /ordered/ =factor=:

   #+begin_quote
   - 
   - 
   - 
   - 
   - 
   - 
   - 
   #+end_quote

2) Create a data frame for your survey data with at least one record
   of (made up) sample data - you can e.g. use your own car.

   #+begin_quote
   1) Create vectors with ~c~ or ~factor~
   2) Add vectors to data frame with ~data.frame~
   3) Store data frame in R object ~survey~
   #+end_quote

   #+begin_src R :results none

   #+end_src

3) Check that ~survey~ is a data frame using ~class~, and confirm that it
   is also a ~list~:

   #+begin_src R

   #+end_src

* Which commands are used to explore data frames

Which R commands are used to explore data frames?

1) List most important data frame information
   #+begin_src R

   #+end_src

2) Last line of the data frame
   #+begin_src R

   #+end_src

3) Statistical summary of all variables
   #+begin_src R

   #+end_src

* What do you do with missing values (~NA~)?

What about missing values, ~NA~?
- Create a new data frame ~survey_na~ with a new column called ~missing~
  that consists only of missing values
- Compute the ~summary~ of the resulting data frame
- Print the result

#+begin_src R

#+end_src

* How do you extract values from a data frame?

1) Look at the variables of your original data frame ~survey~ to remind
   yourself of the data structure

   #+begin_src R

   #+end_src

2) Extract from ~survey~:
   - The first row, first and last column only (don't use a number or
     a name to specify the last column):

     #+begin_src R

     #+end_src

   - The third column using ~numeric~ indices
     #+begin_src R

     #+end_src

   - The fourth through fifth column using ~numeric~ indices

     #+begin_src R
       
     #+end_src

3) How do you extract values using the names of the columns?
   - one named column (like ~Happiness~ OR ~Customer~)?
   - two named columns (like ~Happiness~ AND ~Customer~)

   #+begin_src R

   #+end_src

* How do you add another row to the data frame?

How can you add another row to the data frame?
- add rows with the index operator ~[]~
- add rows with ~rbind(data_frame, vector)~

*Tip: before messing with a data frame, make a copy*

1) Add new row using ~[]~. Tip: define new vector and add it.

   #+begin_src R

   #+end_src
   
2) Add the same row again using ~rbind~. The values are stored in ~row2~
   #+begin_src R

   #+end_src

* How do you remove a row from a data frame?

1) The data frame ~new_survey~ now has a double record in row 3. Remove
   it.

   Tip: Print that row first on its own using ~[]~ and don't save your
   result as an R object before you're sure about it.

   #+begin_src R

   #+end_src

2) Now overwrite ~new_survey~ accordingly, then print the data frame

   #+begin_src R

   #+end_src

   You should have only 2 records again.

* How do you (re)name rows of a data frame?

1) Save ~new_survey~ in a copy named ~df~, and print the names of all
   rows:
   #+begin_src R

   #+end_src

2) Now overwrite the row names with new names, e.g. ~Car_1~ and ~Car_2~
   and print the whole data frame to see the new names
   #+begin_src R

   #+end_src

3) Now you can use the row names to index rows - print the second row
   only, using the index operator ~[]~ and the row name
   #+begin_src R

   #+end_src

* How do you rename column names?

1) For a data frame, the ~names~ function returns the same values as
   ~colnames~. Print the column names of ~df~ using both functions
   #+begin_src R

   #+end_src

2) How can you check if these two vectors are really the same using a
   function?
   #+begin_src R

   #+end_src

3) Change the name of one of your columns using ~colnames~:
   - Find the index of the column using ~which~
   - Print the current ~colnames~ using the index value you found
   - Then overwrite its ~colnames~ value with the new name ~Account~
   - Print the data frame to check the result
   #+begin_src R

   #+end_src

* How can you ~subset~ observations?

1) Use the ~subset~ command on your dataframe:
   - ~select~ two columns
     #+begin_src R

     #+end_src
          
   - ~subset~ (aka filter) the rows based on a ~logical~ condition on a
     ~character~ column
     #+begin_src R

     #+end_src

2) What kind of R object is the result of ~subset~?

   #+begin_src R

   #+end_src

3) Store the last result (the filtered row) in ~df2~, then extract one
   value from the column with ~subset~ using only one command.

   #+begin_src R

   #+end_src

* How can you clean up after a session?

Remove objects from the current session using ~rm~.
- Run ~ls(~) to see your currently loaded R objects
- Remove ~new_survey~ by feeding it to ~rm~
- Run ~ls(~) again to see your currently loaded R objects

#+begin_src R

#+end_src

- Run ~rm(list=ls())~ to remove all remaining objects
- Run ~ls(~) again to see the result
 
#+begin_src R

#+end_src
