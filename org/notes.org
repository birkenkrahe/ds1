#+TITLE: NOTEBOOK - INTRODUCTION TO DATA SCIENCE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 105 Data Structures Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:R :session *R* :results output :exports both
* DONE Week 0 - Orientation ([[https://github.com/birkenkrahe/ds1/blob/main/org/0_overview.org][GitHub]])
#+attr_html: :width 300px:
[[../img/difficulty.png]]

/Image:/ comparing the expected difficulty (smooth curve) to the actual
difficulty (step function) of a class or of a technical book.

What did we achieve: Just a little overview and exposure to Linux and
Emacs using the Google Cloud Shell platform (while waiting for Lyon's
Linux server). See also: review questions in week 2.

* DONE Week 1 - Infrastructure Injection
#+attr_html: :width 600px:
[[../img/penguins.jpg]]

- *DataCamp:* make sure that you subscribe to my workspace, and that you
  can see the assignments. Where can you find the invitation link?
  #+begin_quote
  The link was posted in Google Chat and you can find it in Canvas in
  the Wiki page "Course links".
  #+end_quote

- *Project:* published [[https://lyon.instructure.com/courses/2628/assignments/32556][1st sprint review instructions]] - get to work!
  #+begin_quote
  1) Pick a team
  2) Pick a topic (or topics)
  3) Write a proposal
  4) Submit your proposal
  #+end_quote

- *Review questions from week 1*

- *Getting started with infrastructure*:
  1. [X] Linux exercise (to be finished)
  2. [X] Emacs tutorial
  3. [ ] Datalab demo

** Review questions (Week 1):

1. What are my views on using generative AI when learning how to code?
   #+begin_quote
   "Don't do it." For the long version, see my pamphlet "[[https://github.com/birkenkrahe/org/blob/master/fall24/UsingAItoCode.org][About [not]
   Using AI to Write Code For You]]"
   #+end_quote
2. What does IMRaD stand for and why is it relevant to us?
   #+begin_quote
   - "Introduction, Method, Results, and Discussion" is the standard
     format of scientific publications.
   - Our project sprint reviews follow IMRaD: in each sprint, one of
     these is the central concern.
   #+end_quote
3. What's the purpose of a sprint review in Scrum?
   #+begin_quote
   Presentation of a prototype, which is whatever the project team has
   created by then (perhaps nothing). It's not the same as a milestone
   (which is a date at which a particular result is expected).
   #+end_quote
4. Which of these do not apply to the projects in this course:
   - [X] Use a project from another course in this class.
   - [X] Explore a dataset of your choice that you are curious about.
   - [X] Explore an R or Python package of your choice.
   - [X] Complete a DataCamp competition and report on it.
   - [X] Create a demo that your audience can participate in.
5. True or false? Does this course have a final exam?
   #+begin_quote
   Yes it does but it's optional: you only have to write the final
   exam if you're unhappy with your grade and want to improve it. If
   your final exam result is worse than your final grade up to that
   point, it won't be counted.
   #+end_quote
6. True or false? You can complete your DataCamp assignments any time.
   #+begin_quote
   True - but you will suffer a 50% point loss for late completion.
   #+end_quote
7. What is "Google Cloud Shell"?
   #+begin_quote
   A free cloud application that offers an editor (looks like VSCode)
   and a command-line or shell program. Allows 50 hours computing time
   per week and 5GB of space. The Emacs installation is permanent, the
   installation of R, alas, is not.
   #+end_quote
8. What does =sudo apt install emacs= mean?
   #+begin_quote
   1. =sudo=: gives you admin rights for what follows, requires passwprd
   2. =apt=: package manager program for Debian-like Linux distros
   3. =install=: install the following program (if it can be found)
   #+end_quote
9. What is =wget=?
   #+begin_quote
   GNU =wget= is a non-interactive network downloader. It's one of many
   GNU utilities that Linux uses. =wget= works in the background. Check
   out [[https://www.man7.org/linux/man-pages/man1/wget.1.html][the manual page online]] (or in Linux).
   #+end_quote
10. What are the advantages of DataCamp assignments?
    #+begin_quote
    - The assignments are online & asynchronous (do them when you want)
    - The lessons (often) come with videos and textbook material
    - You can practice what you've learnt (5 questions per day)
    - You can work through DataCamp on the desktop or on your phone
    - You can use completed courses to get internships and work
    - You can use [[https://datacamp.com/datalab][DataLab]] as an interactive notebook (similar to Emacs)
    #+end_quote

** Finish Google Cloud Shell exercise ([[https://github.com/birkenkrahe/ds1/blob/main/org/1_infrastructure_Google_Cloud_Shell.org][GitHub]])

Head over to =shell.cloud.google.com=. You should get to the terminal
right away. Move the editor out of the way, then continue the
exercise to the end:

1. Install Google Cloud Shell app using Chrome: login, and then:
   =Settings > Save and Share > Install page as app=
3. Emacs is actually pre-installed.
4. Install R
5. Open Emacs
6. Create an Org-mode file
7. Run R
8. Close Emacs
9. Watch your quota (50 hours/week)

** Review questions: GitHub Hello World Project

1. What is the purpose of Git, and who created it?
   #+begin_quote
   Controlling the main ("productive") version of a software in the
   presence of potentially many collaborators who work on that
   software at the same time. Git's creator is Linus Torvalds, who
   also wrote the (first) Linux kernel (on top of GNU).
   #+end_quote

2. What does it mean that a repo is =public= or =private=, and who can
   make changes in your repos?
   #+begin_quote
   Private repos can also be accessed by collaborators, which you need
   to invite using their email. Public repos are visible to
   everyone. Nobody can make direct changes in any of your repos -
   changes are applied to Git repos via =merge=.
   #+end_quote

4. What is the purpose of a =pull= request in GitHub?
   #+begin_quote
   A =pull= request is a request for the maintainer of the main branch
   to consider incorporating your changes into the main code base.
   #+end_quote

5. How do you finalize and merge a pull request?
   #+begin_quote
   To finalize and merge a =pull= request, view the =pull= request, and if
   there are no conflicts, click on the =Merge pull request= button, and
   then confirm the merge.
   #+end_quote

6. What can you do with someone else's GitHub public repository?
   #+begin_quote
   - You can watch it (get notifications if there are changes).
   - You can fork it to your own organization (make a copy in GitHub).
   - You can clone it (create a remote copy on your PC).
   #+end_quote

** Review questions: Understanding data science

1. What role would be expected to build a sales data dashboard in a company?
   #+begin_quote
   Data analyst.
   #+end_quote
2. What role would be expected to build a predictive model based on
   customer data?
   #+begin_quote
   Data scientist.
   #+end_quote
3. What role would be expected to collect and prepare data from the
   factory floor for analysis?
   #+begin_quote
   Data engineer.
   #+end_quote
4. You've collected sales and weather data for a restaurant. What kind
   of predictions might be possible using machine learning?
   #+begin_quote
   1. *Sales forecasting* based on historical sales data, weather
      patterns and factors like holidays. Helps with inventory
      management, staffing, planning promotions.
   2. *Customer numbers expected* on a given day or time based on
      weather conditions, time of day, day of the week. Optimize
      staffing levels, improve customer service.
   3. *Demand prediction* for specific menu items dependent on weather
      or time of year or day. Optimize inventory management and menu
      planning.
   4. *Promotion effectiveness*: predict how different weather
      conditions might affect the success of promotions or discounts.
   5. *Seasonal trend analysis*: analyse and predict seasonal trends in
      sales (e.g. during summer months or special events).
   6. *Customer satisfaction* prediction (like ratings) based on past
      trends during similar conditions.
   7. *Impact of external events*: predict how local festivals, sporting
      events in conjunction with weather conditions affect business.
   8. *Dynamic pricing models*: implement dynamic pricing based on
      historical events (summer/winter prices, festival prices etc.)
   9. *Predicting supply chain disruptions*: correlate adverse weather
      and other external events to predict potential supply issues.
   10. *Operational efficiency prediction*: Predict restaurant's utility
       usage (electricity, heating, cooling) based on weather data and
       customer numbers.
   #+end_quote
5. How does the data science pipeline or workflow look like?
   #+attr_html: :width 600px:
   [[../img/2_ds_workflow.png]]

** Start: Birkenkrahe's Emacs Tutorial ([[https://github.com/birkenkrahe/ds1/blob/main/org/1_infrastructure_Emacs.org][GitHub]])

1. You'll get a handout. Online: [[https://tinyurl.com/emacs-tutor][tinyurl.com/emacs-tutor]].
2. Code along with me using Emacs in the cloud.
3. Finish at home if necessary.

Note: You need to install Google Cloud Shell as an app in order to
have all keybindings in Emacs (esp. =C-v= and =C-n=).

* DONE Week 2 - DataLab & Data Collection and Storage
#+attr_html: :width 400px:
[[../img/2_pythagoras.jpg]]

Plan:
- [X] *Next DataCamp lesson (and Quiz 1) due August 30*
- [X] Datalab demo in DataCamp (interactive) - 15 min
- [ ] We have the Linux server! You've all got accounts.
- [ ] Introduction to data science (lecture) - 30 min
- [ ] Introduction to R (lecture/practice) - 60 min

** Datalab demo (GitHub)

DataCamp's DataLab and Google's Colab or RStudio are alternatives to
Emacs + Org-mode that you want to know about (and also so that you can
appreciate what our infrastructure brings to the table).

You'll get a handout of the exercise (PDF), and [[https://www.datacamp.com/datalab/w/64260e9e-2c3c-4e6b-be4b-2dc6bac45d93/edit][here is my notebook]].

** Linux server has arrived

- You should have received your VM server address and password

- Start "Remote Desktop Protocol" on your (Windows) PC

- Enter the server name (e.g. =cslinux01.lyon.edu=) => =Connect=

- Login the =Xorg= session with username = =firstname.lastname= and pw

- Do not shut down or log out of the VM but only close the window

- Download config file with =wget -O .emacs https://tinyurl.com/lyon-emacs=

- Start Emacs and install ESS package with =list-packages= followed by =i=
  and =x= with the cursor on the line of the =ess= package

- To test, create a sample R file =testR.org= with a code block (create
  with =<s <TAB>=) and run it (with =C-c C-c=):
  #+begin_example
  #+property: header-args:R :session *R* :results output
  * Sample file
    #+begin_src R
      str(mtcars)
    #+end_src
  #+end_example

** Review questions (DataLab & Linux)

1. Which languages does dataLab support?
   #+begin_quote
   R, Python, SQL
   #+end_quote

2. How many languages are supported in a single Jupyter notebook?
   #+begin_quote
   One high level language (R or Python), and SQL to connect to
   relational databases.
   #+end_quote

3. How can you change the notebook language?
   #+begin_quote
   You must changed the runtime =Environment=.
   #+end_quote

4. Which shell are you using when you work in dataLab?
   #+begin_quote
   The IPython ("Interactive Python") shell, made popular by the
   Jupyter notebook application (see also "Jupyter Lab")
   #+end_quote

5. What's the difference between dataLab, Google Colab, RStudio, and
   Emacs Org-mode?
   #+begin_quote
   - Emacs, RStudio, DataLab give you terminal access
   - Colab, RStudio, Datalab all work with IPython (.ipynb)
   - Emacs Org-mode provides portable plain-text files
   #+end_quote

6. What are these: Emacs, Org-mode, Linux, R?
   #+begin_quote
   1) Emacs: an editor
   2) Org-mode: a file mode (.org) to write and run source code files
   3) Linux: an operating system (running on a virtual machine)
   4) R: a statistical programming language
   #+end_quote

7. Which software do you need to run R inside Emacs (as in =testR.org=)?
   #+begin_quote
   1. Emacs installed (with =sudo apt install emacs=)
   2. R installed (with =sudo apt install r-base=)
   3. ESS package installed in Emacs (with =M-x list-packages=)
   4. =.emacs= file downloaded (with =wget= from tinyurl.com/lyon-emacs)
   #+end_quote

8. How can you configure an =.org= file so that all code blocks in that
   file can execute R code via an R console in the background?
   #+begin_quote
   Add this at the top:

   =#+PROPERTY: header-args:R :session **R** :results output=

   Either run it with =C-c C-c= ("Local setup refreshed"), or re-open
   the file (it is read whenever the file is being opened).
   #+end_quote

9. When you create an Org-mode file in your home directory (=~/=) and
   run an R code block inside it - which directory is R using?
   #+begin_quote
   R is looking at the location where it was first started or to which
   it was set using the =setwd= function. If there is no other R
   session, then R is using =~/= because that's where the file is
   located.
   #+end_quote

** Review questions (DataCamp - Data Collection and Storage)

1) What's an API?
   #+begin_quote
   API stands for Application Programming Interface, a protocol or set
   of instructions to request data over the Internet. If an
   organization does not offer an API, you cannot (legally) access its
   applications, e.g. databases.
   #+end_quote

2) Does X (formerly Twitter) have a public API and what's it good for?
   #+begin_quote
   Free access to the X API is limited since April 2023 but developers
   can still access it if they're on an X subscription plan.

   The API allows access to various X features such as: reading and
   posting tweets (via bot apps), tracking/following users, sending
   direct messages, etc. See https://developer.x.com/en

   X API: could be a project!
   #+end_quote

3) What could you do with the data obtained from X?
   #+begin_quote
   - Perform a "sentiment analysis" on the text of each tweet,
     e.g. automatically check if a tweet is positive or negative.
   - Count how many times a word, or a hashtag (=#birkenkrahe=) appears
     each week.
   - Combine sentiment analysis and hashtag counts to check if
     positive tweets are correlated with more customers or more views.
   #+end_quote

4) What are the main categories of data and how do they differ from one another?
   #+begin_quote
   The two main types of data are **quantitative** and
   **qualitative**. Quantitative data deals with numbers and can be
   measured, while qualitative data deals with descriptions and can be
   observed but not measured (directly).

   Either of these data types can be structured/stored as image, text,
   geospatial, network data. Example: text data are qualitative
   (content) and have to be converted to quantitative data (tokens)
   for analysis and processing.
   #+end_quote

5) What do you need to consider when storing data?
   #+begin_quote
   - Location (e.g. parallel storage solutions or the cloud, or locally)
   - Data category (e.g. unstructured or tabular)
   - Retrieval (e.g. NoSQL for document (collection-based), or SQL for
     relational (table-based) databases.
   #+end_quote

6) What's a query language? What's an example?
   #+begin_quote
   A language to articulate data queries, for example querying a table
   in a relational database management system using SQL, as in the
   query: =SELECT customer_name FROM customers;=
   #+end_quote

7) What are the top cloud providers in the world?
   #+begin_quote
   - Amazon with Amazon Web Services (AWS)
   - Microsoft with Azure
   - Alphabet with Google Cloud (as in "Google Cloud Shell")
   #+end_quote

8) What does it mean to "scale data storage"?
   #+begin_quote
   When collecting large amounts of different types data from multiple
   sources, the "scaling" question is "how much, what type, and how
   fast"? If an application (e.g. for storage) scales, it can store
   small and (arbitrarily) large data volumes. To scale, technology
   either has to be invented or adapted - with computers, scale always
   comes at a price.
   #+end_quote

9) What's a "data pipeline"?
   #+begin_quote
   A data pipeline is a workflow, a prescribed series of steps or
   stages that is used to retrieve, load, and store data, to better
   control individual steps and (ideally) automate the entire process.

   The term "pipeline" is used whenever segments are combined so that
   the output of the previous segment is the input of the next,
   e.g. in the following shell command, which pipes the string into a
   file and then counts the characters of the string:
   #+end_quote
   Example in a =bash= code block:
   #+begin_src bash :results output
     echo "Hello" | tee hello.txt |  wc -c
     cat hello.txt
   #+end_src

   #+RESULTS:
   : 6
   : Hello

10) What's "ETL" and how is it used (think of an example)?
    #+begin_quote
    - ETL stands for the "Extract", "Transform", "Load" data pipeline.
    - Example: autonomous vehicle operation:
      1. Retrieve real-time traffic data (e.g. "rain", "stop sign")
      2. Transform retrieved data for analysis (e.g. create table)
      3. Load transformed data into container (e.g. SQLite database)
    - When an ETL pipeline is well set up, it can be automated. In the
      case of automated vehicles, operation otherwise wouldn't be
      possible.
    #+end_quote

* DONE Week 3 - Introduction to data science
#+attr_html: :width 600px:
[[../img/frankenstein.jpeg]]

- [X] Quiz 2 is live - complete it by Friday September 6, 11:59 PM
- [ ] Enter project team & idea in Canvas ([[https://lyon.instructure.com/courses/2628/pages/add-your-project-here][wiki]]) by Friday 11 AM
- [ ] Lecture: Introduction to Data Science / skills / jobs

** Recap of last week

- I watched the Zoom recording and checked the Whiteboard screenshots.

- Do you know how to find the Zoom recording and the Whiteboard
  screenshots?

- You need to just know simple definitions (especially if you list
  them in your resume), like: Linux, R, Emacs, Data Science etc.

- Can you write a shell pipeline command? How about counting the
  number of files in your current directory? Remember: =ls= lists files,
  =wc -l= counts lines.
  #+begin_src bash :results output :exports both
    ls | wc -l
  #+end_src


** Review: "Preparation, Exploration, Visualization"

1. Why is data preparation important in data science?
   #+begin_quote
   To prevent errors, incorrect results, and bias in algorithms.
   #+end_quote
   Code example:
   #+begin_src R :session *R* :results output :exports both
     df <- read.csv("../data/cleaning.csv") # read CSV data into data frame
     str(df)  # structure of data frame
     df
   #+end_src

   #+RESULTS:
   #+begin_example
   'data.frame':        4 obs. of  4 variables:
    $ Name   : chr  "Sara" "Lis" "Hadrien" "Lis"
    $ Age    : int  27 30 NA 30
    $ Size   : num  1.77 5.58 1.8 5.58
    $ Country: chr  "Belgium" "USA" "FR" "USA"
        Name Age Size Country
   1    Sara  27 1.77 Belgium
   2     Lis  30 5.58     USA
   3 Hadrien  NA 1.80      FR
   4     Lis  30 5.58     USA
   #+end_example

   #+begin_src R :session *R* :results output :exports both
     df$Country[1] <- "BE"  # change to country code
     df$Size[df$Size==5.58] <- 1.70  # change inches to meters
     str(df)
   #+end_src

2. What is the purpose of removing duplicates in a dataset?
   #+begin_quote
   To ensure that each observation (row) is unique.
   #+end_quote
   Code example:
   #+begin_src R :session *R* :results output :exports both
     df      # original data frame with duplicate row
     df[-4,] -> df   # duplicate row removed
     df
   #+end_src

   #+RESULTS:
   :      Name Age Size Country
   : 1    Sara  27 1.77 Belgium
   : 2     Lis  30 5.58     USA
   : 3 Hadrien  NA 1.80      FR
   : 4     Lis  30 5.58     USA
   :      Name Age Size Country
   : 1    Sara  27 1.77 Belgium
   : 2     Lis  30 5.58     USA
   : 3 Hadrien  NA 1.80      FR

3. What are methods to handle missing values?
   #+begin_quote
   Impute (replace, e.g. by an average), drop, or keep
   #+end_quote
   Code example:
   #+begin_src R :session *R* :results output :exports both
     df
     df$Age[Name="Hadrien"]  # extract third element of "Age" column
     df$Age[3]
     df$Age[3] <- as.integer(mean(df$Age[-3])) # impute mean for missing value
     df
   #+end_src

   #+RESULTS:
   #+begin_example
        Name Age Size Country
   1    Sara  27 1.77 Belgium
   2     Lis  30 5.58     USA
   3 Hadrien  NA 1.80      FR
   [1] NA
   [1] NA
        Name Age Size Country
   1    Sara  27 1.77 Belgium
   2     Lis  30 5.58     USA
   3 Hadrien  28 1.80      FR
   #+end_example

4. What is the main goal of EDA?
   #+begin_quote
   The main goal of Exploratory Data Analysis is to explore the data,
   formulate hypotheses, and assess characteristics, e.g. about
   correlation, trends, patterns. It happens after data preparation.
   #+end_quote
   Code example:
   #+begin_src R :session *R* :results output :exports both
     summary(df) # statistical summary for the data frame df
   #+end_src

   #+RESULTS:
   :      Name                Age             Size         Country
   :  Length:3           Min.   :27.00   Min.   :1.770   Length:3
   :  Class :character   1st Qu.:27.50   1st Qu.:1.785   Class :character
   :  Mode  :character   Median :28.00   Median :1.800   Mode  :character
   :                     Mean   :28.33   Mean   :3.050
   :                     3rd Qu.:29.00   3rd Qu.:3.690
   :                     Max.   :30.00   Max.   :5.580

5. What does Anscombe's quartet illustrate in the context of EDA?
   #+begin_quote
   The Anscombe quartet shows the importance of visualizing data even
   if the statistical properties are very similar.
   #+end_quote
   Code example:
   #+begin_src R :session *R* :results output :exports both
     summary(anscombe[c("x1","x2","y1","y2")])
   #+end_src

   #+RESULTS:
   :        x1             x2             y1               y2
   :  Min.   : 4.0   Min.   : 4.0   Min.   : 4.260   Min.   :3.100
   :  1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.315   1st Qu.:6.695
   :  Median : 9.0   Median : 9.0   Median : 7.580   Median :8.140
   :  Mean   : 9.0   Mean   : 9.0   Mean   : 7.501   Mean   :7.501
   :  3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8.570   3rd Qu.:8.950
   :  Max.   :14.0   Max.   :14.0   Max.   :10.840   Max.   :9.260

   #+begin_src R :file ../img/anscombe.png :session *R* :results file graphics output :exports both
     par(mfrow=c(1,2), pty='s')
     plot(anscombe$x1, anscombe$y1, col="red",  pch=19) # linearly correlated
     plot(anscombe$x2, anscombe$y2, col="blue", pch=9 ) # non-linearly correlated
   #+end_src

   #+RESULTS:
   [[file:../img/anscombe.png]]

6. What does 'Knowing your data' mean?
   #+begin_quote
   1. Preview data values (=head=)
   2. View structure (=str=)
   3. Descriptive stats (=summary=)
   4. Visualize (=plot=)
   5. Look for correlations
   6. Look for outliers
   #+end_quote

7. Which picture or photo do you know that's "worth a thousand words"?
   #+attr_html: :width 400px:
   #+caption: 16-year old German soldier crying when he is captured, WWII
   [[../img/hitler_youth_crying.jpg]]

   - Others that came to my mind instantly:
     #+begin_quote
     - [[https://www.witf.io/wp-content/uploads/2020/02/iwo-jima-rosenthal-520748-1-1920x1080.jpg][Battle of Iwo Jima]]
     - [[https://www.njspotlightnews.org/wp-content/uploads/sites/123/2024/07/Donald-Trump-assassination-attempt-July-13-2024.jpg][Trump assassination]]
     - [[https://www.gannett-cdn.com/-mm-/f40f3606fa7f520417c0c9e02d7aa7a371d004ba/r=x513&c=680x510/local/-/media/USATODAY/USATODAY/2013/04/28/war-icons-003-4_3.jpg][Vietnam war]]
     #+end_quote

8. What are dashboards in data science, and what are they good for?
   #+begin_quote
   - Dashboards group relevant information in one place
   - Real-time information helps viewers to keep track
   - Dashboards can be customized to different data needs
   - Dashboards can easily be overwhelming (design issues)
   - Interactive dashboards can help extract features
   #+end_quote

9. What are dashboards definitely not good for?
   #+begin_quote
   - Data preparation, cleaning and transformation
   - Explorative Data Analysis (because they are fixed)
   #+end_quote

10. What is 'labeling' in data visualizations, and why is it important?
    #+begin_quote
    Labeling helps viewers understand what each axis, title, and legend
    represents. Units and data sources are also important.
    #+end_quote
    Code example:
    #+begin_src R :file ../img/labeling.png :session *R* :results file graphics output :exports both
      par(mfrow=c(1,2),pty='s')
      plot(mtcars$wt,mtcars$mpg) # unlabeled
      plot(mtcars$wt,mtcars$mpg,
           main="32 cars from `mtcars`",
           xlab="Weight [tons]",
           ylab="Miles-per-gallon") # labeled
    #+end_src

    #+RESULTS:
    [[file:../img/labeling.png]]

** Introduction to data science (lecture)

- [X] Data science popularity
- [X] Data science definitions
- [X] Data science skill sets
- [X] Data science jobs
- [X] Data science processes

* DONE Week 4 - Introduction to the R shell (9/11)
#+attr_html: :width 700px:
[[../img/Shell-Southbank-Plaza.jpg]]

- [X] Where was I on 9/11?
- [X] New quiz (25 questions) live later today
- [X] New DataCamp lessons live (Introduction to R)
- [X] Introduction to R
- [X] Project - using ~app.litmaps.com~ for references
- [X] Project - analytics is not the same as prediction
- [X] Project - proposal deadline is Friday 13 Sept 11:59 pm

** Review questions: Introduction to R (1)

1. What is CRAN and why is it important for R users?
   #+BEGIN_QUOTE
   CRAN (Comprehensive R Archive Network) is the repository where R
   and its packages are stored. It provides the official sources for
   downloading R and its libraries. Link: https://cran.r-project.org
   #+END_QUOTE

2. What command would you use to find where the R program is on your
   system?
   #+begin_src bash :results output
     which R
   #+end_src

   #+RESULTS:
   : /usr/bin/R

3. How can you run an R script from the command line? Where will you
   see the output?
   #+begin_quote
   You can run an R script ~script.R~ with ~Rscript script.R~, or in the
   background with ~R CMD BATCH script.R~.

   ~Rscript~ will print the output to the screen (=stdout=).

   ~R CMD BATCH~ will generate a file ~script.Rout~ with the results.
   #+end_quote

** Review questions: Introduction to R (2)

1. How can you check the current directory of your R console from the
   R console? What's the difference between the two commands?

   #+begin_src R :session *R* :results output :exports both

     ## run OS/Linux command from R to get present working directory
     system("echo $PWD")

     ## use an R function to get current working directory
     getwd()

   #+end_src

   #+RESULTS:
   : /home/marcus/GitHub/ds1/org
   : [1] "/home/marcus/GitHub/ds1/org"

2. What's the difference between asking for help with =?= vs. =??=

   #+begin_example R

   ## open on-board help page
   ?getwd

   ## list all help files matching `getwd` using fuzzy matching
   ??getwd

   ## `help` commands work best on R console, not in Org-mode
   #+end_example

3. You're at =$HOME=, in =/home/user/=, and you want to go to
   =/home/user/org=. Will these commands work and how are they
   different?

   #+begin_example

   setwd("org")  # will work if ./org exists - relative path

   setwd("/home/user/org")  # will work if $HOME/org exists - absolute path

   #+end_example

4. What does the following command do?

   #+begin_src R :session *R* :results output :exports both
     ## executes an OS/Linux shell command
     ## lists all files in the directory above the current directory
     ## redirects (>) the output into a file ls.txt
     ## view the ls.txt file
     ## this is NOT a pipe
     system("ls .. > ls.txt && cat ls.txt")
   #+end_src

   #+RESULTS:
   : data
   : img
   : ipynb
   : LICENSE
   : org
   : pdf
   : README.md

5. Where can you see examples for the use of R functions?

   #+begin_example R

   example(plot)  # works best on the R console (not in Org-mode)

   #+end_example

6. Which ways do you know to open an R console/shell?

   #+begin_quote

1) Open an R shell buffer in Emacs with =M-x R=

2) Open a terminal (OS shell) and open an R shell by entering =R=

3) In an Org-mode file, activate an R code block that has a
   =:session= header argument.

   This works outside of Emacs only with interpreted languages like
   R, Python, Julia, and not with compiled languages.

   #+end_quote

Example in C:
#+begin_src C :main yes :includes <stdio.h> :results output
  printf("hello, Isaac");
#+end_src

#+RESULTS:
: hello, Isaac

** IN PROGRESS Introduction to R
[[../img/3_Rlogo.png]]

- [X] Why R?
- [X] What is R?
- [X] R shell practice
- [ ] Exploring =base:options=
- [ ] R package commands
- [ ] R startup with ~~/.Rprofile~

The practice exercises are on GitHub at: [[https://tinyurl.com/intro-R-practice][tinyurl.com/intro-R-practice]]

** Summary for Introduction to R

*** Summary R shell

- R is an interpreted program with a shell (CLI/console)
- On Linux, the executable (a wrapper script) is in =/usr/bin/R=
- The R files are in =/usr/lib/R/=
- You can run R scripts in the foreground with =Rscript= or in the
  background as a "batch" job with =R CMD BATCH=.

*** Summary R environment

- Function without arguments: ~getwd()~
- Function with arguments: ~setwd('...')~
- Absolute pathname like ~'c:/Users/birkenkrahe/'~
- Relative pathnames like ~'../../'~ ("go up by 2 levels")

*** Summary R display options

- The functions ~options~ controls display options
- You can extract display options with ~$~, e.g. ~options()$prompt~
- You can get help with the ~help~ function (or ~?~)

*** Summary R computing and commenting

- You can print results with or without ~print~
- Create (inline) comments with ~#~
- ~eshell~ is a Linux-type shell in Emacs ([[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#:~:text=Eshell%20is%20a%20command%20shell,code%20is%20natural%20and%20seamless.][doc]])
- On Linux you can also use ~shell~ (M-x shell)

*** Summary of R packages

- You can install, uninstall packages and data sets in them
- You must load packages and data sets before using them
- Your current R session keeps track of all loaded objects
- Display structure, head and tail rows of loaded data sets

*** Summary R startup file

- Emacs and R have a home directory (~~/~) for startup files[fn:4]
- You can determine R's startup behavior in ~~/.Rprofile~
- ~~/.Rprofile~ is read every time a new R shell is started

* DONE Week 5 - R options and packages (SpaceX)
#+attr_html: :width 700px:
[[../img/spacex-polaris-dawn-spacewalk.jpeg]]

/Image: SpaceX Polaris Dawn Mission - Apollo Altitude Record Reached/

- [X] Project update - first sprint review
  1. I'll upload proposal + feedback to shared drive.
  2. If you used AI for your research, you must say how & cite it.
  3. Next sprint review: Methodology. Deliverable: literature review
     (Oct 11).
  4. Using Google Docs etc. is OK but using a notebook (e.g. in
     Org-mode) makes more sense for a data science project.

- [X] R package commands & practice

- [X] Customizing at startup & practice

- [ ] Arithmetic with R

- [ ] Vectors in R

** Review: R options and package management

1. What's the policy regarding AI assistence in your projects?
   #+begin_quote
   You should say if you used it, how you used it, what your
   experiences were, and you ought to reference it.
   #+end_quote

   Example for a complete software reference:
   #+begin_src R :session *R* :results output :exports both :noweb yes
     citation()
   #+end_src

2. How can you see the global options for R?
   #+begin_src R :session *R* :results output :exports both
     options() |> head(n=3)
   #+end_src

   #+RESULTS:
   : $add.smooth
   : [1] TRUE
   :
   : $bitmapType
   : [1] "cairo"
   :
   : $browser
   : [1] "xdg-open"

3. What data structure are the global options?
   #+begin_src R :session *R* :results output :exports both
     class(options())
   #+end_src

   #+RESULTS:
   : [1] "list"

4. What data type does the individual option =options()$prompt= have?
   #+begin_src R :session *R* :results output :exports both
     class(options()$prompt)
   #+end_src

   #+RESULTS:
   : [1] "character"

5. How would you change the R shell prompt e.g. to ="R> "=, and how
   could you check it?
   #+begin_src R :session *R* :results output :exports both
     options(prompt="R> ")
     options()$prompt
   #+end_src

   #+RESULTS:
   : [1] "R> "

6. How can you load and remove a package from an R session?
   #+begin_src R :session *R* :results output :exports both
     any(grep("MASS",search()))  # "is there any 'MASS' in the search()

     library(MASS)
     any(grep("MASS",search()))

     detach("package:MASS")
     any(grep("MASS",search()))
   #+end_src

   #+RESULTS:
   : [1] FALSE
   : [1] TRUE
   : [1] FALSE

7. How can you see all datasets in the current R session?
   #+begin_src R :session *R* :results output :exports both
     data()
   #+end_src

8. How can you be sure these datasets have to be loaded?
   #+begin_src R :session *R* :results output :exports both
     library(MASS)
     detach("package:MASS")
     any(grep("MASS",data()))  # any MASS datasets available?
     library(MASS)
     any(grep("MASS",data()))
   #+end_src

   #+RESULTS:
   : [1] FALSE
   : [1] TRUE

9. What's the difference between =search()= and =searchpaths()=?
   #+begin_src R :session *R* :results output :exports both
     search()  # returns character vector of loaded packages
     searchpaths()  # returns file system locations of loaded packages
   #+end_src

   #+RESULTS:
   #+begin_example
    [1] ".GlobalEnv"        "package:MASS"      "ESSR"              "package:stats"
    [5] "package:graphics"  "package:grDevices" "package:utils"     "package:datasets"
    [9] "package:methods"   "Autoloads"         "package:base"
    [1] ".GlobalEnv"
    [2] "/home/marcus/R/x86_64-pc-linux-gnu-library/4.1/MASS"
    [3] "ESSR"
    [4] "/usr/lib/R/library/stats"
    [5] "/usr/lib/R/library/graphics"
    [6] "/usr/lib/R/library/grDevices"
    [7] "/usr/lib/R/library/utils"
    [8] "/usr/lib/R/library/datasets"
    [9] "/usr/lib/R/library/methods"
   [10] "Autoloads"
   [11] "/usr/lib/R/library/base"
   #+end_example

10. What is the difference between =ls()= and =ls("package:base")=?
    #+begin_src R :session *R* :results output :exports both
      library(MASS)
      s <- "hello"
      ls()  # lists all user-defined objects (functions, variables)
      ls("package:MASS")  # lists all functions and datasets in MASS only
    #+end_src

    #+RESULTS:
    #+begin_example
    [1] "s"
      [1] "abbey"             "accdeaths"         "addterm"           "Aids2"
      [5] "Animals"           "anorexia"          "area"              "as.fractions"
      [9] "bacteria"          "bandwidth.nrd"     "bcv"               "beav1"
     [13] "beav2"             "biopsy"            "birthwt"           "Boston"
     [17] "boxcox"            "cabbages"          "caith"             "Cars93"
     [21] "cats"              "cement"            "chem"              "con2tr"
     [25] "contr.sdif"        "coop"              "corresp"           "cov.mcd"
     [29] "cov.mve"           "cov.rob"           "cov.trob"          "cpus"
     [33] "crabs"             "Cushings"          "DDT"               "deaths"
     [37] "denumerate"        "dose.p"            "drivers"           "dropterm"
     [41] "eagles"            "enlist"            "epil"              "eqscplot"
     [45] "farms"             "fbeta"             "fgl"               "fitdistr"
     [49] "forbes"            "fractions"         "frequency.polygon" "GAGurine"
     [53] "galaxies"          "gamma.dispersion"  "gamma.shape"       "gehan"
     [57] "genotype"          "geyser"            "gilgais"           "ginv"
     [61] "glm.convert"       "glm.nb"            "glmmPQL"           "hills"
     [65] "hist.FD"           "hist.scott"        "housing"           "huber"
     [69] "hubers"            "immer"             "Insurance"         "is.fractions"
     [73] "isoMDS"            "kde2d"             "lda"               "ldahist"
     [77] "leuk"              "lm.gls"            "lm.ridge"          "lmsreg"
     [81] "lmwork"            "loglm"             "loglm1"            "logtrans"
     [85] "lqs"               "lqs.formula"       "ltsreg"            "mammals"
     [89] "mca"               "mcycle"            "Melanoma"          "menarche"
     [93] "michelson"         "minn38"            "motors"            "muscle"
     [97] "mvrnorm"           "nclass.freq"       "neg.bin"           "negative.binomial"
    [101] "negexp.SSival"     "newcomb"           "nlschools"         "npk"
    [105] "npr1"              "Null"              "oats"              "OME"
    [109] "painters"          "parcoord"          "petrol"            "phones"
    [113] "Pima.te"           "Pima.tr"           "Pima.tr2"          "polr"
    [117] "psi.bisquare"      "psi.hampel"        "psi.huber"         "qda"
    [121] "quine"             "Rabbit"            "rational"          "renumerate"
    [125] "rlm"               "rms.curv"          "rnegbin"           "road"
    [129] "rotifer"           "Rubber"            "sammon"            "select"
    [133] "Shepard"           "ships"             "shoes"             "shrimp"
    [137] "shuttle"           "Sitka"             "Sitka89"           "Skye"
    [141] "snails"            "SP500"             "stdres"            "steam"
    [145] "stepAIC"           "stormer"           "studres"           "survey"
    [149] "synth.te"          "synth.tr"          "theta.md"          "theta.ml"
    [153] "theta.mm"          "topo"              "Traffic"           "truehist"
    [157] "ucv"               "UScereal"          "UScrime"           "VA"
    [161] "waders"            "whiteside"         "width.SJ"          "write.matrix"
    [165] "wtloss"
    #+end_example

* DONE Week 6 - Arithmetic in R and special numbers
#+attr_html: :width 600px:
[[../img/Hollerith_Punched_Card.jpg]]

/Image: Hollerith Tabulator punch card - patented on 9/23/1884/.

Arithmetic in R:
- [X] Perform basic numerical operations
- [X] Translate complex mathematical formulas
- [X] Use logarithms and exponentials
- [X] Brush up on mathematical E-notation
- [X] Know R's special numbers
- [X] Review DataCamp lesson on vectors
- [ ] Know R's special number functions
- [ ] Understand logical values and operators

** Review: Basic arithmetic, logarithms

1. What's the result of =(-1)^(1/2) = sqrt(-1)=
   #+begin_src R :session *R* :results output :exports both
     (-1)^(1/2)
     class(NaN)
   #+end_src

   #+RESULTS:
   : [1] NaN
   : [1] "numeric"

2. Which R package must be loaded to use =sqrt= and =log=?
   #+begin_quote
   None. This is not Python.
   #+end_quote
   #+begin_src R :session *R* :results output :exports both
     sqrt(4)
     log(x=100,b=10)
   #+end_src

   #+RESULTS:
   : [1] 2
   : [1] 2

3. What does the following code demonstrate?
   #+begin_src R :session *R* :results output :exports both
     2 + 3 * 4
   #+end_src

   #+RESULTS:
   : [1] 14

   #+begin_quote
   It shows that multiplication has a higher precedence than addition.
   #+end_quote

4. The =identical= function checks for identity of its two
   arguments. What about the following code?
   #+begin_src R :session *R* :results output :exports both
     log10(10000000)
     log10(10000010)
     identical(log10(10000000),
               log10(10000010))
   #+end_src

   #+RESULTS:
   : [1] 7
   : [1] 7
   : [1] FALSE

   Solution:
   #+begin_quote
   The default value for =options()$digit= is 6, and it needs to be
   increased to show all digits of the result.
   #+end_quote
   #+begin_src R :session *R* :results output :exports both
     log10(10000000)
     log10(10000010)
     options(digits=8)
     log10(10000000)
     log10(10000010)
   #+end_src

   #+RESULTS:
   : [1] 7
   : [1] 7
   : [1] 7
   : [1] 7.0000004

   Another way:
   #+begin_src R :session *R* :results output :exports both
     all.equal(log10(10000000),
               log10(10000010))
   #+end_src

   #+RESULTS:
   : [1] "Mean relative difference: 6.2042038e-08"

5. You transform a 2D plot semi-logarithmically, using log10 on the
   y-axis values. What happens when y = 0, y = 1e-7, or y = 1?
   #+begin_src R :session *R* :results output :exports both
     log10(0)
     log10(0.0000001)
     log10(1)
   #+end_src

   #+RESULTS:
   : [1] -Inf
   : [1] -7
   : [1] 0

6. What's the difference between =log10(10^3)= and =log(exp(3))=?
   #+begin_src R :session *R* :results output :exports both
     x <- log10(10^3)
     y <- log(exp(3))
     x
     y
     identical(x,y)
     all.equal(x,y)
   #+end_src

   #+RESULTS:
   : [1] 3
   : [1] 3
   : [1] TRUE
   : [1] TRUE

** Project update

- Left detailed feedback for every project

- Next sprint review: October 11 ("Literature Review")

- Two approaches to solving any problems

  1) Do it yourself (using books, and other people)

  2) Build on the work of others (articles, videos...)

** Euler's number is special
#+attr_html: :width 400px:
[[../img/euler.png]]

Re: Christopher's question about the repeated pattern in e:
- e like \pi is irrational - cannot be represented by a fraction.
- Irrational numbers are mysterious: between each two distinct
  rational numbers there are infinitely many irrational numbers.
- Put differently: $\mathbb{R} \backslash \mathbb{Q}$ is /dense/.

#+begin_src R :session *R* :results output :exports both :noweb yes
  options(digits=20)
  exp(1)
#+end_src

#+RESULTS:
: [1] 2.7182818284590450908

Recommended: What is Mathematics by Richard Courant (1941)
#+attr_html: :width 200px:
[[../img/courant.png]]

Quote (by Courant):
#+begin_quote
"Once during my undergraduate years, I used the word 'infinity', and
my mathematics professor said 'I won't have bad language in my class."
#+end_quote

** Review: DataCamp lesson on vectors

#+begin_quote
"To know vectors is to know R."
#+end_quote

1. How can you create a vector?
   #+begin_src R :session *R* :results output :exports both
     foo <- vector()
     foo
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     mode(foo)   # storage mode
     class(foo)  # object type
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     foo <- vector(mode="numeric",length=5)
     foo
     str(foo)
   #+end_src

2. Given a vector =heights <- (180,170,175)= of heights belonging to Jim,
   Joe, and Jeff, how can I assign their names to =heights=?
   #+begin_src R :session *R* :results output :exports both
     heights <- c(180,170,175)
     heights
     names(heights)
   #+end_src

   #+RESULTS:
   : [1] 180 170 175
   : NULL

   #+begin_src R :session *R* :results output :exports both
     class(NULL)
     NULL
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     c("Jim", "Joe", "Jeff") -> names(heights)
     heights
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     str(heights)
     NULL -> names(heights)
     str(heights)
   #+end_src

3. Can I assign names to some, but not to all elements of a vector?
   #+begin_src R :session *R* :results output :exports both
     heights <- c("Jim"=180,170,175)
     heights
     names(heights)
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     heights <- c("Jim"=180,170,175)
     names(heights)
     names(heights)[2] <- "Joe"
     names(heights)
     names(heights)[3] <- "Jeff"
     names(heights)
     heights
   #+end_src

4. How can I extract values from a named vector?
   #+begin_src R :session *R* :results output :exports both
     heights <- c("Jim"=180, "Joe"=170, "Jeff"=175)
     heights

     heights[2]
     heights["Joe"]
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     heights[-2]
     heights[-c(1,3)]
     heights
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     heights$Jim
     heights[-c("Jim","Jeff")]
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     str(heights)
   #+end_src

5. What is "logical indexing"?
   #+begin_src R :session *R* :results output :exports both
     heights <- c("Jim"=180, "Joe"=170, "Jeff"=175)
     heights
   #+end_src

   #+RESULTS:
   :  Jim  Joe Jeff
   :  180  170  175

   #+begin_quote
   |       |       |       |        | class       | ops |
   |-------+-------+-------+--------+-------------+-----|
   | name  | "Jim" | "Joe" | "Jeff" | "character" | ==  |
   | value |   180 |   170 |    175 | "numeric"   | + * |
   | index |     1 |     2 |      3 | "numeric"   | [ ] |
   #+end_quote

   #+begin_src R :session *R* :results output :exports both
     idx <- heights > 170
     idx
     heights[idx]    # this is more computer sciencey
     heights[heights > 170]   # this is more mathematical
   #+end_src

   #+begin_src R :session *R* :results output :exports both
     idx2 <- which(heights > 170)
     idx2
     heights[idx2]
   #+end_src

6. And what you can do with vectors?
   #+begin_src R :file vector.png :session *R* :results file graphics output :exports both
     plot(heights,pch=16,cex=3)
   #+end_src

   #+RESULTS:
   [[file:vector.png]]

   #+begin_src R :file vector2.png :session *R* :results file graphics output :exports both
     color = c(Jim="red",Joe="green",Jeff="blue")
     barplot(heights, col=color)
   #+end_src

   #+RESULTS:
   [[file:vector2.png]]

** Review: E-notation, special numbers

1. What's the difference between the R functions =identical= and
   =all.equal=?
   #+begin_src R :session *R* :results output :exports both

     foo <- exp(log(100))
     bar <- log(exp(100))

     options(digits=17)
     foo
     bar

     identical(foo,bar) # checks numerical identity (strict)
     all.equal(foo,bar) # checks machine identity (soft)
   #+end_src

2. How can you get rid of scientific notation, e.g. for 100,000,000?
   #+begin_src R :session *R* :results output :exports both
     foo <- 100000000
     foo
     format(foo, scientific=FALSE)
   #+end_src

   #+RESULTS:
   : [1] 1e+08
   : [1] "100000000"

3. How can you compute with "100"?
   #+begin_src R :session *R* :results output :exports both
     foo <- format("100",scientific=FALSE)
     foo
     class(foo)
   #+end_src

   #+RESULTS:
   : [1] "100"
   : [1] "character"

   #+begin_src R :session *R* :results output :exports both
     bar <- as.numeric("100")
     bar
     is.numeric(bar)
     bar**2
   #+end_src

   #+RESULTS:
   : [1] 100
   : [1] TRUE
   : [1] 10000

   #+begin_src R :session *R* :results output :exports both :noweb yes
     as.numeric("Marcus")
   #+end_src

   #+RESULTS:
   : [1] NA
   : Warning message:
   : NAs introduced by coercion

4. What is: log(0, b=10)? What is log(1)?
   #+begin_src R :session *R* :results output :exports both
     log(0, b=10)
     log(1)
     log(1, base=exp(1))
   #+end_src

   #+RESULTS:
   : [1] -Inf
   : [1] 0
   : [1] 0

5. What's the data type of a missing number?
   #+begin_src R :session *R* :results output :exports both
     class(NA)
   #+end_src

   #+RESULTS:
   : [1] "logical"

* DONE Week 7 - Project update, special functions, logical operators
#+attr_html: :width 400px:
[[../img/career.jpeg]]

/Image: Lyon Career Expo - You gotta go!/

Project Update - change of plans
- [X] Literature review with litmaps.com
- [X] Podcast with notebooklm.google.com

Finish "Arithmetic in R":
- [X] Know R's special number functions
- [X] Understand logical values and operators

** Project update
#+attr_html: :width 400px:
[[../img/notebooklm.png]]

- Give a very short overview of your project status.
- Articulate clearly:
  1) What is your main research question? (What)
  2) What is your main methodology? (How)
  3) What is your literature review strategy? (Next?)
  4) How are you working this as a team?

- 2nd sprint review: NotebookLM experiment: notebooklm.google.com is
  an experimental Google product that creates source-based notebooks
  for you but also instant podcasts.

- Here is an example - based on a finished recent paper:
  [[https://tinyurl.com/notebooklm-demo][tinyurl.com/notebooklm-demo]]

- I'm going to change your 2nd sprint remit from "literature review"
  to "create a Google NotebookLM using your sources".

- Share the resulting notebook with me and with your team mates.

- Generate a podcast and share it with everyone on the Google Chat.


** Back to "Arithmetic in R"

- [X] There is a new 10 minutes podcast now (see Google chat).
- [X] I've also posted a link to a YouTube video playlist.
- [ ] Let's finish up our remaining topics from this section.

* DONE Week 8 - Vectors & Factors in R
#+attr_html: :width 450px:
[[../img/1846-suffolk-punch.jpg]]

- [X] *Popquiz*: Vectors & Matrices & =NA= extension.

- [X] *Poll:* Did anyone listen to the last two podcasts or videos?

- [X] *Video*: I recorded sample solutions to the popquiz ([[https://youtube.com/playlist?list=PLwgb17bzeNyhPl0kUNTRkLM2-pnfC2kHR&si=kzsSLx7R8pdkLOIr][playlist]])

- [X] Update: new quiz will be available later

- [ ] *Update:* Projects and "Data Science is not Science"

- [ ] *Friday*: Lab with exercises from the topics of the week

*New topic: "Vectors in R"*
- [X] Why we need vectors
- [X] Creating vectors
- [ ] Plotting vectors
- [ ] Sorting and measuring vectors
- [ ] Naming vectors
- [ ] Indexing vectors
- [ ] Coercing vectors

** Vectors and Matrices (DataCamp) popquiz & =NA= extension

1. Create a vector =temp= of temperatures predicted for next week. The
   temperatures (from Monday to Friday) were: 76, 75, 77, 79, 81.
   #+begin_src R
     c(76, 75, 77, 79, 81) -> temp
     temp
   #+end_src

   #+RESULTS:
   : [1] 76 75 77 79 81

2. Create a vector =week= of weekdays from Monday (Mon) to Friday (Fri):
   #+begin_src R
     c("Mon","Tue","Wed","Thu","Fri") -> week
     week
   #+end_src

   #+RESULTS:
   : [1] "Mon" "Tue" "Wed" "Thu" "Fri"

3. Name the =temp= vector according to days of =week=:
   #+begin_src R
     week -> names(temp)
     temp
     str(temp)  # structure of the vector
   #+end_src

   #+RESULTS:
   : Mon Tue Wed Thu Fri
   :  76  75  77  79  81
   :  Named num [1:5] 76 75 77 79 81
   :  - attr(*, "names")= chr [1:5] "Mon" "Tue" "Wed" "Thu" ...

4. Print temperatures that are not below 80 degrees Fahrenheit:
   #+begin_src R
     temp >= 80  # Boolean / logical vector (flag)
     temp[temp>=76 & temp<79]

     temp >= 80 -> temperatures_greater_or_equal_80
     temp[temperatures_greater_or_equal_80]

     temp < 80 -> idx
     temp[idx]

     temp["Mon"]  # using the name to extract a value
   #+end_src

   #+RESULTS:
   #+begin_example
     Mon   Tue   Wed   Thu   Fri
   FALSE FALSE FALSE FALSE  TRUE
   Mon Wed
    76  77
   Fri
    81
   Mon Tue Wed Thu
    76  75  77  79
   Mon
    76
   #+end_example

5. Compute the average of the temperatures for the =week=:
   #+begin_src R
     mean(week)  # won't work because...
     class(week) # `week` is a character vector
     mean(temp)
   #+end_src

   #+RESULTS:
   : [1] NA
   : Warning message:
   : In mean.default(week) : argument is not numeric or logical: returning NA
   : [1] "character"
   : [1] 77.6

6. Compute the average of the temperature for the =week= without the
   days on which the temperature was at least 80 degrees Fahrenheit:
   #+begin_src R
     temp[-c(2:4)]  # exclude certain values
     mean(temp[-5]) # average if you know it's 5

     idx <- temp < 80
     idx
     temp[idx]

     mean(temp[idx])
   #+end_src

   #+RESULTS:
   : Mon Fri
   :  76  81
   : [1] 76.75
   :   Mon   Tue   Wed   Thu   Fri
   :  TRUE  TRUE  TRUE  TRUE FALSE
   : Mon Tue Wed Thu
   :  76  75  77  79
   : [1] 76.75

7. Create an unnamed vector =temp2= from =temp=:
   #+begin_src R
     names(temp)  # print the names
     temp -> temp2  # make a copy
     temp2
     names(temp2) <- NULL  # delete the names
     temp2  # print the unnamed = nameless vector
   #+end_src

   #+RESULTS:
   : [1] "Mon" "Tue" "Wed" "Thu" "Fri"
   : Mon Tue Wed Thu Fri
   :  76  75  77  79  81
   : [1] 76 75 77 79 81

8. Convert the vector =temp2= into a 1 x 5 =matrix= =temp_m=:
   #+begin_src R
     matrix(1:9,nrow=3) # example 3 x 3 matrix of numbers 1-9

     matrix(temp,nrow=1) -> temp_m
     temp_m
   #+end_src

   #+RESULTS:
   :      [,1] [,2] [,3]
   : [1,]    1    4    7
   : [2,]    2    5    8
   : [3,]    3    6    9
   :      [,1] [,2] [,3] [,4] [,5]
   : [1,]   76   75   77   79   81

9. Name the columns of the matrix according to =week= names:
   #+begin_src R
     colnames(temp_m) <- week
     temp_m
   #+end_src

   #+RESULTS:
   :      Mon Tue Wed Thu Fri
   : [1,]  76  75  77  79  81

10. Compute the average temperature without using the =mean= function:
    #+begin_src R
      rowSums(temp_m) / length(temp_m)
    #+end_src

    #+RESULTS:
    : [1] 77.6

11. Compute the average temperature using the =mean= function:
    #+begin_src R
      mean(temp_m)
    #+end_src

    #+RESULTS:
    : [1] 77.6

12. Compute the average temperature with =mean= only for the days where
    the temperature was greater or equal 80 degrees Fahrenheit:
    #+begin_src R
      mean(temp_m[temp<80])
    #+end_src

    #+RESULTS:
    : [1] 76.75

13. Add a row of missing values to the matrix and store it in =temp_m2=:
    #+begin_src R
      rbind(temp_m,NA) -> temp_m2
      temp_m2
    #+end_src

    #+RESULTS:
    :      Mon Tue Wed Thu Fri
    : [1,]  76  75  77  79  81
    : [2,]  NA  NA  NA  NA  NA

14. Compute the average temperature of =temp_m2= using =mean=:
    #+begin_src R
      mean(temp_m2, na.rm=TRUE)
    #+end_src

    #+RESULTS:
    : [1] 77.6

15. Compute the average temperature with =mean= only for the days where
    the temperature was lower than 80F (Mon-Thu):
    #+begin_src R
      idx
      mean(temp_m2[idx],na.rm=TRUE)  # this is not right!
      mean(na.omit(temp_m2)[idx])
    #+end_src

    #+RESULTS:
    :   Mon   Tue   Wed   Thu   Fri
    :  TRUE  TRUE  TRUE  TRUE FALSE
    : [1] 77.75
    : [1] 76.75

** "Data Science is not a Science"
#+attr_html: :width 600px:
[[../img/rant.png]]

- My last [[https://drive.google.com/file/d/1e1YStWDWH88FPO2n2s_FibUz2TcAhZfv/view?usp=drive_link][NotebookLM podcast]] is a major improvement over its original
  source on [[https://youtu.be/U5f3iufE-bI?si=D_ve6I8sF52v6Zk-][YouTube]], a foul-mouthed, whiny video by a German physicist
  who earned a data science certificate (which she used to get a job).

- The podcast edited out all of the bad language, the sloppy speech
  patterns, and the hostility (for example against Human Resources).

- It refocused the original content and boiled it down to a core
  message: To succeed in data science, you need some skills, but you
  also need some domain knowledge, some deep understanding of data.

- My personal take: Don't feel sorry for bad choices that you made in
  the past but instead look ahead and make better choices from now on.

- Google Chat post:
  #+begin_quote
  Major rant by a German (?) physicist: "[[https://youtu.be/ALPOwJlOj1k?si=w7exo24j65EEJRgq][Data science is not science]]"
  (YouTube)? She's a bit like [[https://www.youtube.com/c/SabineHossenfelder/videos][Sabine Hossenfelder]] (German particle
  physicist) for data science ... a real rant, bad language, but Germans
  don't know any better (we don't really 'feel' it when we curse in
  English). Apparently, Almani is also a physicist, who earned a data
  science certificate (?). She could also have said this briefly and
  without so much cursing. In fact the resulting [[https://drive.google.com/file/d/1e1YStWDWH88FPO2n2s_FibUz2TcAhZfv/view?usp=sharing][NotebookLM podcast]] is a
  MAJOR improvement on her video which I found very hard to listen to
  (her accent is also terrible): It organizes Almani's thoughts, cleans
  up the language, and focuses on the main arguments as part of a
  civilized conversation. Upshot: The synthesized podcast is worth
  listening to, the original YouTube video is not. Take away: As a data
  scientist, you do need to have domain knowledge - something that you
  understand deeply so that you can understand the data and deliver the
  analysis. (By the way, I also don't think data science is a "science"
  yet, much like computer science, compared to physics or chemistry, and
  I teach it consequently as a vocation and a craft rather than a
  science.)
  #+end_quote

** Lecture & DataCamp review as Lab (30 min)

- Quiz 7 is ready for you (complete by Oct 18)

- Download the practice file from [[https://tinyurl.com/vectors-lab][tinyurl.com/vectors-lab]]

- Complete the questions on your own!

- Upload your result to Canvas ("Vectors lab" assignment)

- I will post a video with the solutions!

* DONE Week 9 - Vectors and Dataframes in R
#+attr_html: :width 600px:
[[../img/chirico.jpg]]

/Image: Giorgio Di Chirico, The Joy and Enigma of the Strange Hour (1913)/

*NO CLASS THIS FRIDAY - FOUNDER'S DAY CONVOCATION AT 11 AM*

- [X] Review: Vectors and factors
- [X] Lecture & codealong: Vectors in R (=plot=, =hist=, =barplot=)
- [X] Practice file for Founder's Day Friday (no class meeting)
- [ ] Weekend: Quiz 8 on DataCamp and plotting vectors

** Review: vectors and factors

*Problems:* ds1/org/5_vectors_lab.org - [[https://tinyurl.com/vectors-lab][tinyurl.com/vectors-lab]]

*Upload* complete file to Canvas

1. How can you append ~foo~ to ~bar~ if ~c(1,2,3) -> foo~, ~c(4,5,6) -> bar~?
   #+begin_src R
     c(1,2,3) -> foo
     c(4,5,6) -> bar
     c(bar,foo)
   #+end_src

   #+RESULTS:
   : [1] 4 5 6 1 2 3

2. How can you turn ~c("a","b") -> baz~ into a ~numeric~ vector?
   #+begin_src R
     c("a","b") -> baz
     as.numeric(baz)
     class(as.numeric(c("1","2")))
   #+end_src

   #+RESULTS:
   : [1] NA NA
   : Warning message:
   : NAs introduced by coercion
   : [1] "numeric"

3. How can you turn ~c(1,2,3) -> foo~ into a ~character~ vector?
   #+begin_src R
     c(1,2,3) -> foo
     as.character(foo)
     as.character(foo) |> as.numeric()
   #+end_src

   #+RESULTS:
   : [1] "1" "2" "3"
   : [1] 1 2 3

4. What will ~c(1,1,1.0)~, ~c(1,1,1.1)~, ~c(1,1,1e+6)~, ~c(1,1,0.000001e6)~ print?
   #+begin_src R
     c(1,1,1.0)  # not coerced into floating point
     c(1,1,1.1)  # coerced into floating-point
     c(1,1,1e6)  # forced into scientific notation
     c(1,1,0.000001e6)
   #+end_src

   #+RESULTS:
   : [1] 1 1 1
   : [1] 1.0 1.0 1.1
   : [1] 1e+00 1e+00 1e+06
   : [1] 1 1 1

5. What R object =class= are: ~Inf~, ~NA~, ~NaN~, ~NULL~, and ~c(NA, NaN, Inf)~?
   #+begin_src R
     class(Inf)  # special number
     class(NA)   # special (Boolean/logical) number
     class(NaN)  # special number (but "not a number")
     class(NULL) # special type (only object of type NULL)
     class(c(NA,NaN,Inf))  # vector of special numbers
     class(c(NA,NaN,Inf,NULL))  # vector of special numbers
   #+end_src

   #+RESULTS:
   : [1] "numeric"
   : [1] "logical"
   : [1] "numeric"
   : [1] "NULL"
   : [1] "numeric"
   : [1] "numeric"

6. Convert the vector ~names~ with the elements ~"Joe", "Jeff", "Jim",
   "Jane"~ to a factor and store it in ~names_f~.
   #+begin_src R
     names <- c("Joe", "Jeff", "Jim", "Jane") # character vector
     factor(names) -> names_f
     names_f
   #+end_src

   #+RESULTS:
   : [1] Joe  Jeff Jim  Jane
   : Levels: Jane Jeff Jim Joe

7. Extract the levels vector and determine its object class using a
   pipe!
   #+begin_src R
     levels(names_f) |> class()
   #+end_src

   #+RESULTS:
   : [1] "character"

8. Create a named vector ~grades~ with the elements A, C, B, B for the
   ~grades~ of Jeff, Jim, Jane and Joe, respectively.
   #+begin_src R
     grades <- c(Jeff='A', Jim='C', Jane='B', Joe='B')
     grades
     names(grades)
   #+end_src

   #+RESULTS:
   : Jeff  Jim Jane  Joe
   :  "A"  "C"  "B"  "B"
   : [1] "Jeff" "Jim"  "Jane" "Joe"

9. Convert ~grades~ to an ordered factor ~grades_f~ with the ~levels~ A, B,
   C so that A > B > C,
   #+begin_src R
     factor(grades,order=TRUE,
            levels=c('C','B','A')) -> grades_f
     grades_f
   #+end_src

   #+RESULTS:
   : Jeff  Jim Jane  Joe
   :    A    C    B    B
   : Levels: C < B < A

10. Store ~grades~ and ~grades_f~ in a ~data.frame~ named ~df~, and then apply
    first ~str~ and then ~summary~ to ~df~.
    #+begin_src R
      data.frame(grades,grades_f) -> df
      df
      str(df)
      summary(df)
    #+end_src

    #+RESULTS:
    #+begin_example
         grades grades_f
    Jeff      A        A
    Jim       C        C
    Jane      B        B
    Joe       B        B
    'data.frame':       4 obs. of  2 variables:
     $ grades  : chr  "A" "C" "B" "B"
     $ grades_f: Ord.factor w/ 3 levels "C"<"B"<"A": 3 1 2 2
        grades          grades_f
     Length:4           C:1
     Class :character   B:2
     Mode  :character   A:1
    #+end_example

11. Use ~grades_f~ to show that Jeff is a better student than Jim.
    #+begin_src R
      grades_f["Jeff"] > grades_f["Jim"]
    #+end_src

    #+RESULTS:
    : [1] TRUE

12. Add two levels, D and F, to ~grades_f~, and then test with ~str~ if it
    worked.
    #+begin_src R
      c("F", "D", levels(grades_f)) -> levels(grades_f)
      levels(grades_f)
      str(grades_f)
    #+end_src

    #+RESULTS:
    : [1] "F" "D" "C" "B" "A"
    :  Ord.factor w/ 5 levels "F"<"D"<"C"<"B"<..: 1 1 2 2
    :  - attr(*, "names")= chr [1:4] "Jeff" "Jim" "Jane" "Joe"


** Vectors in R (continued)

- [X] Base R
- [X] Base R plotting: Histograms
- [X] Bar plots, line plots, scatter plots, box plots
- [ ] Creating vector sequences and repetitions
- [ ] Sorting and measuring vector lengths

Download and open this file to codealong:
[[https://tinyurl.com/vectors-codealong][tinyurl.com/vectors-codealong]]

In Linux:
#+begin_example bash
wget -O vectors.org tinyurl.com/vectors-codealong
#+end_example

Open Emacs:
#+begin_example
emacs --file vectors.org
#+end_example

Code alongside me!


** Vector lab II (Friday - no class - founder's day convocation)

- Download practice file (later): [[https://tinyurl.com/vectors-plotting-24][tinyurl.com/vectors-plotting-24]]

- Complete practice file

- Upload completed practice file to Canvas by next Monday

- We will review the solutions next week

* DONE Week 10 - Sequencing, repeating, and measuring vectors
#+attr_html: :width 600px:
#+caption: Claude Monet, Cap d'Antibes, Mistral (1888)
[[../img/Monet_Cap_dAntibes_Mistral_1888.jpg]]

- [X] Review of the (failed) vector plotting practice
- [X] Review of the DataCamp lesson on "Data Frames"
- [X] Review of the 2nd sprint results "Literature Review"
- [X] Vectors in R: sequences, repetitions, sorting, measuring
- [X] Vectors in R: short lab practice (Canvas upload)

** Vector plotting practice (failed?)
#+attr_html: :width 400px:
[[../img/plotting_practice.png]]

- Only three submissions: what were *you* doing on Friday?
- Do yourself a favor and complete the practice file!
- The questions are part of the current online quiz.
- Check your solutions with the PDF and/or my video.
- Remember to keep up your DataCamp practice!

** Review: DataCamp "Data frames"

1. What is a data frame, and why is it useful in data analysis?
   #+begin_quote
   A =data.frame= (R) or =DataFrame= (Python) is a two-dimensional data
   structure similar to a =table= where data is stored in *rows* and
   *columns*, commonly used for data manipulation in languages like R
   and Python. Data frames allow for access, manipulation, and
   analysis of structured data in *multiple data types*.
   #+end_quote

2. Which function is used to create a =data.frame=?
   #+begin_src R
     data.frame(
       nums=c(1,2,3),
       name=c("Jim","Joe","Jane"),
       bool=c(TRUE,TRUE,FALSE)
     )
   #+end_src

   #+RESULTS:
   :   nums name  bool
   : 1    1  Jim  TRUE
   : 2    2  Joe  TRUE
   : 3    3 Jane FALSE

3. How do you select specific rows and columns from a =data.frame=? For
   example, the first two rows of =mtcars=?
   #+begin_src R
     ## With subsetting functions
     head(mtcars,n=2) # mtcars |> head(2)
     subset(mtcars,mpg==21)
     ## With bracket / index operator notation []
     mtcars[c(1,2), ]
     ## With the accessor operator $ - individual columns only
     mtcars$mpg[c(1,2)]
   #+end_src

   - For Python: Get the data first:
     #+begin_src bash :results output :exports both
       wget -O ../data/mtcars.csv https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv
       head --lines=2 ../data/mtcars.csv
     #+end_src

     #+RESULTS:
     : model,mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
     : Mazda RX4,21,6,160,110,3.9,2.62,16.46,0,1,4,4

   - The code is quite a bit more complicated:
     #+begin_src python :results output :session *Python* :python python3 :exports both
       import pandas as pd
       mtcars = pd.read_csv("../data/mtcars.csv")
       print(mtcars.head(n=2)) # function

       print(mtcars.iloc[:2])  # slicing based on integer-location
       print(mtcars.iloc[:2]["mpg"])

       print(mtcars.loc[:1])   # slicing based on row labels (0,1)
       print(mtcars.loc[:1, "mpg"])
     #+end_src

4. How do you sort the values of a =data.frame= by a specific column in
   descending order? For example the =mpg= column of =mtcars=?
   #+begin_src R
     sort(mtcars$mpg,decreasing=TRUE)
   #+end_src

   #+RESULTS:
   :  [1] 33.9 32.4 30.4 30.4 27.3 26.0 24.4 22.8 22.8 21.5 21.4 21.4 21.0 21.0 19.7 19.2 19.2 18.7 18.1 17.8 17.3 16.4 15.8 15.5
   : [25] 15.2 15.2 15.0 14.7 14.3 13.3 10.4 10.4

5. How do you filter those elements of =mtcars= with more than 25
   miles-per-gallon?
   #+begin_src R
     mtcars$mpg > 25 -> idx # index vector
     mtcars$mpg[idx]
   #+end_src

   #+RESULTS:
   : [1] 32.4 30.4 33.9 27.3 26.0 30.4

6. Which cars satisfy this condition?

   The car types are not stored in the data frame (they are names):
   #+begin_src R
     head(mtcars,2)
   #+end_src

   #+begin_src R
     which(mtcars$mpg > 25) -> rows25  # row index vector
     rows25
     rownames(mtcars[rows25,]) # select row names from dataframe argument
   #+end_src

   #+RESULTS:
   : [1] 18 19 20 26 27 28
   : [1] "Fiat 128"       "Honda Civic"    "Toyota Corolla" "Fiat X1-9"      "Porsche 914-2"  "Lotus Europa"

   Works as well:
   #+begin_src R
     subset(mtcars[1], mpg>25)
   #+end_src

** Project: 2nd sprint review with NotebookLM/podcasts

- Very interesting results! Not everybody understood how the
  application works. You were penalized for not submitting [[https://lyon.instructure.com/courses/2628/assignments/35174][requested]]
  deliverables (like the litmap - did you understand why you used
  it?). I added your *feedback* to your NotebookLM as a new note.

- Some of you didn't seem to have looked at the notebooks: they were
  untitled or they were titled "Sprint review 2" or something like
  it. *You need to make things easier for your customer (me).* The
  customer cannot read your mind.

- Some of you found sources but did not add them in the sidebar - how
  should the AI know what you want it to talk about? The *Summary* at
  below the "Notebook guide" should have tipped you off. *You need to
  make it easier for the AI to give you what you need.* The AI cannot
  read your mind either.

- *Highlights:* Donna/Kelli's adding data from the British Museum, and
  Johnzelle/Suyog/Gavin using a list of paper abstracts as
  source. *Unpacking* the podcast could be your whole code-free project.

- Please take some time now to answer the following questions:

  1. *Did you like the exercise? Why or why not?*
  2. *Did you find the podcast useful in any way?*
  3. *Which lessons did you extract from the podcast?*
  4. *What is your next step for sprint no. 3* ("Results", due on
     Friday, November 15, with an abstract as a deliverable).

- Discuss with your team members what to write, and then put your
  answers on this Kanban board with one post-it per question:
  [[https://tinyurl.com/notebook-kanban][tinyurl.com/notebook-kanban]]

** Vectors in R (continued)

- [X] Creating vector sequences and repetitions
- [X] Sorting and measuring vector lengths
- [X] Naming and coercing vectors
- [ ] Lab with practice file for Canvas upload

Download and open this file to codealong:
[[https://tinyurl.com/vectors-codealong-2][tinyurl.com/vectors-codealong-2]]

In Linux:
#+begin_example bash
wget -O vectors2.org tinyurl.com/vectors-codealong-2
#+end_example

Open Emacs:
#+begin_example
emacs --file vectors2.org
#+end_example

Code alongside me!

** Early morning: Moments of Happiness in a Fast-changing World
#+attr_html: :width 400px:
[[../img/5_gnome.jpg]]

I feel happy every morning when I log in, because of the certainty,
constancy, and continuity of the digital world in the face of change.

** Vector lab

1. Download [[https://tinyurl.com/6-vectors-lab][tinyurl.com/6-vectors-lab]]
2. List file
3. Open file in Emacs
4. Complete file
5. Upload to Canvas
6. Review the last exercise
7. Happy weekend!

#+begin_example bash
  wget -O vectorlab.org tinyurl.com/6-vectors-lab
  ls -l vectorlab.org
  emacs --file vectorlab.org
#+end_example

*Review of the data frame exercise:*

1. Setup with vectors =seq_vec=, =rep_vec=, and =char_vec=:
   #+begin_src R :results none
     rep_vec <- rep(x=c(-1,3,-5,7,-9),each=10,times=2)
     seq_vec <- sort(seq(from=5,to=-11,by=-0.3))
     char_vec <- c("Jim", "Jane", "Joe", "Jeff")
   #+end_src

2. These vectors have different lengths:
   #+begin_src R
     length(seq_vec)
     length(rep_vec)
     length(char_vec)
   #+end_src

   #+RESULTS:
   : [1] 54
   : [1] 100
   : [1] 4

3. Create data frame & show first 6 rows:
   #+begin_src R
     data.frame(
       "Numbers" = seq_vec,
       "Repeats" = rep(rep_vec, length.out=length(seq_vec)),
       "Names" = rep(char_vec, length.out=length(seq_vec))
     ) -> df
     head(df)
   #+end_src

   #+RESULTS:
   :   Numbers Repeats Names
   : 1   -10.9      -1   Jim
   : 2   -10.6      -1  Jane
   : 3   -10.3      -1   Joe
   : 4   -10.0      -1  Jeff
   : 5    -9.7      -1   Jim
   : 6    -9.4      -1  Jane

4. Calculate summary stats for =Numbers= and =Repeats= columns:
   #+begin_src R
     summary(df[ , c("Numbers","Repeats")])
   #+end_src

   #+RESULTS:
   :     Numbers           Repeats
   :  Min.   :-10.900   Min.   :-9
   :  1st Qu.: -6.925   1st Qu.:-5
   :  Median : -2.950   Median :-1
   :  Mean   : -2.950   Mean   :-1
   :  3rd Qu.:  1.025   3rd Qu.: 3
   :  Max.   :  5.000   Max.   : 7

5. Filter rows with positive =Numbers= and =Repeats= below 5:
   #+begin_src R
     subset(df, Numbers > 0 & Repeats < 5)
   #+end_src

   #+RESULTS:
   #+begin_example
      Numbers Repeats Names
   41     1.1      -9   Jim
   42     1.4      -9  Jane
   43     1.7      -9   Joe
   44     2.0      -9  Jeff
   45     2.3      -9   Jim
   46     2.6      -9  Jane
   47     2.9      -9   Joe
   48     3.2      -9  Jeff
   49     3.5      -9   Jim
   50     3.8      -9  Jane
   51     4.1      -1   Joe
   52     4.4      -1  Jeff
   53     4.7      -1   Jim
   54     5.0      -1  Jane
   #+end_example

6. Sort by =Names= column in ascending order, show first 10 rows:
   #+begin_src R
     sort(df$Names)  # values
     order(df$Names)  # indices used to extract values
   #+end_src

   #+RESULTS:
   :  [1] "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jane" "Jeff"
   : [16] "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jeff" "Jim"  "Jim"  "Jim"
   : [31] "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Jim"  "Joe"  "Joe"  "Joe"  "Joe"
   : [46] "Joe"  "Joe"  "Joe"  "Joe"  "Joe"  "Joe"  "Joe"  "Joe"  "Joe"
   :  [1]  2  6 10 14 18 22 26 30 34 38 42 46 50 54  4  8 12 16 20 24 28 32 36 40 44 48 52  1  5  9 13 17 21 25 29 33
   : [37] 37 41 45 49 53  3  7 11 15 19 23 27 31 35 39 43 47 51

   #+begin_src R
                                             #df[order(df$Names), ] |> head(10)
                                             #head(df[order(df$Names), ],n=10)
     df[order(df$Names), ][1:10,]
   #+end_src

   #+RESULTS:
   #+begin_example
      Numbers Repeats Names
   2    -10.6      -1  Jane
   6     -9.4      -1  Jane
   10    -8.2      -1  Jane
   14    -7.0       3  Jane
   18    -5.8       3  Jane
   22    -4.6      -5  Jane
   26    -3.4      -5  Jane
   30    -2.2      -5  Jane
   34    -1.0       7  Jane
   38     0.2       7  Jane
   #+end_example


* Week 11: Subsetting vectors [Oct 28]
#+attr_html: :width 300px:
#+caption: The Sleep of Reason Produces Monsters, Goya (1799)
[[../img/the_sleep_or_reason_produces_monsters.jpg]]

** DONE Project Preview: Discussion / Presentation
#+attr_html: :width 600px:
[[../img/discussion.jpeg]]

- The third sprint review is for your results, and you should bring
  that to a close by Nov 15.
- You get a day off (both morning and afternoon classes) on Nov 8: use
  it to make a final push towards some results.
- The final presentation should contain a "discussion" (see image):
  1) Big summary (what do the results show?)
  2) Findings (How do the findings relate to what we already know?)
  3) Outlook (What else could or should one do now?)
  4) Limitations (What limits the validity of this research?)

** DONE Review: Manipulating Data Frames

1. Two vectors have different lengths - can I put them in a =data.frame=?
   #+begin_quote
   All vectors in a =data.frame= must have the same length because data
   frames are rectangular by shape.
   #+end_quote

2. If two =numeric= vectors =foo= and =bar= don't have the same length, how
   can I put them in a =data.frame=?
   #+begin_src R
     ## OK as long as the vector lengths are even multiples of one another
     foo <- 1:10
     bar <- 1:5
     data.frame("foo"=foo,
                "bar"=bar)
   #+end_src

   #+RESULTS:
   #+begin_example
      foo bar
   1    1   1
   2    2   2
   3    3   3
   4    4   4
   5    5   5
   6    6   1
   7    7   2
   8    8   3
   9    9   4
   10  10   5
   #+end_example

3. If two =numeric= vectors =foo= and =bar= have =length= 10 and 6, how can I
   put them into a =data.frame=?
   #+begin_src R
     foo2 <- 1:10
     bar2 <- 1:6
     data.frame(foo2,bar2)
   #+end_src

   #+RESULTS:
   : Error in data.frame(foo2, bar2) : 
   :   arguments imply differing number of rows: 10, 6

   Solution:
   #+begin_src R
     foo2 <- 1:10
     bar2 <- 1:6
     ## Fill remainder of shorter vector with NA
     c(bar2,
       rep(x=NA,
           times=length(foo2)-length(bar2))) -> bar3
     bar3
     data.frame(foo2,bar3)
   #+end_src

   #+RESULTS:
   #+begin_example
    [1]  1  2  3  4  5  6 NA NA NA NA
      foo2 bar3
   1     1    1
   2     2    2
   3     3    3
   4     4    4
   5     5    5
   6     6    6
   7     7   NA
   8     8   NA
   9     9   NA
   10   10   NA
   #+end_example

4. Why are the rows of the =data.frame= numbered?
   #+begin_quote
   The row numbers are actually elements of the =character= vector
   =row.names= when the default =NULL= is active:
   #+end_quote
   #+begin_src R
     row.names(mtcars)
     data.frame(mtcars,row.names=NULL) -> mtcars_no_names
     row.names(mtcars_no_names)
   #+end_src

   #+RESULTS:
   #+begin_example
    [1] "Mazda RX4"           "Mazda RX4 Wag"       "Datsun 710"          "Hornet 4 Drive"     
    [5] "Hornet Sportabout"   "Valiant"             "Duster 360"          "Merc 240D"          
    [9] "Merc 230"            "Merc 280"            "Merc 280C"           "Merc 450SE"         
   [13] "Merc 450SL"          "Merc 450SLC"         "Cadillac Fleetwood"  "Lincoln Continental"
   [17] "Chrysler Imperial"   "Fiat 128"            "Honda Civic"         "Toyota Corolla"     
   [21] "Toyota Corona"       "Dodge Challenger"    "AMC Javelin"         "Camaro Z28"         
   [25] "Pontiac Firebird"    "Fiat X1-9"           "Porsche 914-2"       "Lotus Europa"       
   [29] "Ford Pantera L"      "Ferrari Dino"        "Maserati Bora"       "Volvo 142E"
    [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20"
   [21] "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" "32"
   #+end_example

   #+begin_src R
     mtcars_no_names
   #+end_src

   #+RESULTS:
   #+begin_example
       mpg cyl  disp  hp drat    wt  qsec vs am gear carb
   1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
   2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
   3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
   4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
   5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
   6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
   7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
   8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
   9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
   10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
   11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
   12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
   13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
   14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
   15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
   16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
   17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
   18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
   19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
   20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
   21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
   22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
   23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
   24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
   25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
   26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
   27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
   28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
   29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
   30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
   31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
   32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
   #+end_example
   
5. How can you select two columns from a =data.frame=? E.g. the =mpg= and
   =wt= columns of =mtcars=?
   #+begin_src R
     ## with row names
     mtcars[ , c("mpg","wt")] |> head(3)
     ## without row names
     data.frame(mtcars[ , c("mpg","wt")],row.names=NULL) |> head(3)     
   #+end_src

   #+RESULTS:
   :                mpg    wt
   : Mazda RX4     21.0 2.620
   : Mazda RX4 Wag 21.0 2.875
   : Datsun 710    22.8 2.320
   :    mpg    wt
   : 1 21.0 2.620
   : 2 21.0 2.875
   : 3 22.8 2.320

6. How can you filter rows from a =data.frame= whose numeric values lie
   in an interval [x,y]? E.g. cars in =mtcars= with =mpg= in (22,25)?
   #+begin_src R
     ## with subset
     subset(mtcars, mpg > 22 & mpg < 25) # target: mtcars + logic condition

     ## without subset
     mtcars$mpg -> mpg # extract column
     which(mpg > 22 & mpg < 25) -> idx # get index vector
     mtcars[idx, ] # extract rows
   #+end_src

   #+RESULTS:
   :             mpg cyl  disp hp drat   wt  qsec vs am gear carb
   : Datsun 710 22.8   4 108.0 93 3.85 2.32 18.61  1  1    4    1
   : Merc 240D  24.4   4 146.7 62 3.69 3.19 20.00  1  0    4    2
   : Merc 230   22.8   4 140.8 95 3.92 3.15 22.90  1  0    4    2
   :             mpg cyl  disp hp drat   wt  qsec vs am gear carb
   : Datsun 710 22.8   4 108.0 93 3.85 2.32 18.61  1  1    4    1
   : Merc 240D  24.4   4 146.7 62 3.69 3.19 20.00  1  0    4    2
   : Merc 230   22.8   4 140.8 95 3.92 3.15 22.90  1  0    4    2

7. What is the difference between =order= and =sort= for =baz <- 1:10=?
   #+begin_src R
     baz <- 1:10
     sort(baz)
     order(baz)
   #+end_src

   #+RESULTS:
   :  [1]  1  2  3  4  5  6  7  8  9 10
   :  [1]  1  2  3  4  5  6  7  8  9 10

8. What is the difference between =order= and =sort= for this 'political'
   vector: =quz <- c("Trump","Vance","Harris","Walz")=?
   #+begin_src R
     quz <- c("Trump","Vance","Harris","Walz")
     sort(quz) # sort values (alphabetical by default)
     order(quz) # order indices according to sort
     order(quz)[2] # extract element from index vector
     quz[order(quz)] # sort values using ordered index vector
   #+end_src

   #+RESULTS:
   : [1] "Harris" "Trump"  "Vance"  "Walz"
   : [1] 3 1 2 4
   : [1] 1
   : [1] "Harris" "Trump"  "Vance"  "Walz"

9. What does "vectorization" mean in practice?
   #+begin_quote
   You don't need a loop to perform operations on all elements of a
   vector.
   #+end_quote

   #+begin_src R
     foo  # 1) vectorize: take every element 2) print it
   #+end_src

   #+RESULTS:
   :  [1]  1  2  3  4  5  6  7  8  9 10

10. How many data structure layers does a named vector have? How many
    does a factor have?
    #+begin_quote
    Vector: =c("Joe" = 180, "Jim" = 178, "Jane" = 172)=
    Factor: =factor(c("Joe" = 180, "Jim" = 178, "Jane" = 172)=)

    | Layer | Extraction |
    |-------+------------|
    | Name  | =names(foo)= |
    | Value | =foo=        |
    | Index | =which=      |
    | Level | =levels=     |

    #+end_quote
    Code example:
    #+begin_src R
      foo = c("Joe" = 180, "Jim" = 178, "Jane" = 172)
      names(foo)
      foo
      which(foo==foo)
      bar = factor(c("Joe" = 180, "Jim" = 178, "Jane" = 172))
      levels(bar)
    #+end_src

    #+RESULTS:
    : [1] "Joe"  "Jim"  "Jane"
    :  Joe  Jim Jane 
    :  180  178  172
    :  Joe  Jim Jane 
    :    1    2    3
    : [1] "172" "178" "180"

** DONE Subsetting data structures in R (and elsewhere)

- [X] Vectorization
- [X] Retrieving vector elements
- [X] Using the colon operator
- [X] Statistical functions on subsets
- [X] Logical functions in vectors
- [X] Selection with logical index vectors
- [X] Negative indices
- [ ] Putting dissected vectors together
- [ ] Practice lab

If you want to continue where we stopped, download/open
[[https://raw.githubusercontent.com/birkenkrahe/ds1/refs/heads/main/org/7_subsetting_codealong.org][tinyurl.com/sub-code]]. Then code along with your own headlines,
comments and code blocks.


** NEXT Subsetting Lab

- 10 questions to test your subsetting and indexing skills.
- 10 questions to apply these skills to the "Nile" data set.
- Upload your results to Canvas by the end of today.

** TODO BONUS Exercise "10 Questions on =islands="

- You can work on this exercise for bonus points and/or to test your
  data science chops. 

- You should be able to answer all questions without difficulty in
  about 1/2 hour to 1 hour.

- You can upload the result to Canvas afterwards by the end of term.

* Week 12: Data frames & =data.table= [Nov 4]

* Week 13: R Package =data.table= & Lists [Nov 11]

* Week 14: Exploratory Data Analysis in R & Plots [Nov 25]
* Week 15: Final presentations [Dec 2]
