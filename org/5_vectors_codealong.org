#+TITLE: VECTORS in R
#+AUTHOR: Introduction to data science (DSC 105) Fall 2024
#+startup: hideblocks indent overview inlineimages entitiespretty
#+PROPERTY: header-args:R :results output :session *R* :exports both :noweb yes
#+options: toc:1
* What will you learn?

After this lesson, you should be able to:

- Understand assignment in R
- Creating vectors, sequences and repetitions
- Sorting and measuring vector length
- Subsetting and extracting vector elements
- Vectorizing (rescaling)
- Classes and logical vectors

/Most sections are accompanied by YouTube videos./

* Everything is an object [[https://youtu.be/7Ab2RQs7Lj8][video​]]

- R is a functional, object-oriented language

- There are usually many different ways to achive the same result

- Different solutions differ in: performance, clarity, ease of use

- PERFORMANCE: important for large data sets only

- CLARITY: essential when communicating methods, code, results

- EASE OF USE: determines the fun you have when programming

[[https://www.youtube.com/playlist?list=PL6SfZh1-kWXl3_YDc-8SS5EuG4h1aILHz][[Watch YouTube Playlist Vectors Part I​]​]]

#+begin_notes
R is a functional, object-oriented language: everything's an object,
and functions rule, as you already know. Because functions rule, there
are usually many different ways to achieve the same result. They often
differ in terms of performance, ease of use, and clarity. Performance
becomes important when you work with truly large data sets, otherwise
not so much. Ease of use to some extent determines the fun you do or
don't have when using the language. Clarity is essential when
communicating your methods (including your code) and your results to
others. This is not a nice to have. Views of different packages (like
the Tidyverse) differ massively regarding all of these.
#+end_notes

/Image: The instructor during COVID in his Berlin appartamento (1912)./

* Assigning objects [[https://youtu.be/WZqJ_AyoOEU][(video)​]]

Code along:
1. Open Linux
2. Open Emacs
3. Open an .org file
4. Create R block (<s TAB R)
5. Start R console
-----
- You can use ~<-~ or ~=~ for assignment of values to variables
- Use ~<-~ for objects, and ~=~ to assign function parameters
- Object names must start with a letter and avoid reserved words

  1) Create an object ~foo~ that stores the value 3^2 \times 4^{1/8} and
     display it.
     #+begin_src R
       foo <- 3**2 * 4**(1/8)
       foo
     #+end_src

     #+RESULTS:
     : [1] 10.70286

  2) Overwrite ~foo~ with itself divided by 2.33. Print the result to
     the screen.
     #+begin_src R
       foo / 2.33 -> foo
       foo
     #+end_src

     #+RESULTS:
     : [1] 4.593504

  3) Experiment with different formats and types - look all
     functions that you don't know up using ~help~:

     1. Create a new object ~bar~ with the value -8.2 \times 10^{-13} using
        scientific ("e") notation and print it to the console.

        #+begin_src R :session *R* :results output :exports both :noweb yes
          bar <- -8.2e-13
          bar
        #+end_src

        #+RESULTS:
        : [1] -8.2e-13

     2. Print ~bar~ again, but this time *without* scientific notation,
        using the ~format~ function. Save the result in ~barf~
        #+begin_src R :session *R* :results output :exports both :noweb yes
          format(bar, scientific = FALSE) -> barf
          barf
        #+end_src

        #+RESULTS:
        : [1] "-0.00000000000082"

     3. Check the data type of ~barf~ with the ~class~ function.
        #+begin_src R :session *R* :results output :exports both :noweb yes
          class(barf)
        #+end_src

        #+RESULTS:
        : [1] "character"

     4. Convert ~barf~ back to a number with the ~as.numeric~ function.
        #+begin_src R
          barf |> as.numeric()  # using a pipe
          as.numeric(barf) -> barf
          is.numeric(barf)
        #+end_src

        #+RESULTS:
        : [1] -8.2e-13
        : [1] TRUE

        #+begin_src R
          bar <- -8.2e-13
          bar
          barf <- format(bar, scientific=FALSE)
          barf
          class(barf)
          as.numeric(barf)
        #+end_src

  4) Print the result of multiplying ~foo~ and ~bar~ to the console.

     #+begin_src R
       foo * bar
     #+end_src

     #+RESULTS:
     : [1] -3.766673e-12

  5) Check all variables created in the current session so far with
     ~ls~, then delete them with ~rm~, and check that they're all gone.
     #+begin_src R
       ls()
       rm(bar)  # remove a single object
       ls()
       rm(list=ls())   # empty the entire list
       ls()
     #+end_src

     #+RESULTS:
     : [1] "barf" "foo"
     : Warning message:
     : In rm(bar) : object 'bar' not found
     : [1] "barf" "foo"
     : character(0)

* Why we need vectors [[https://youtu.be/iFsB_34mnR0][(video)]]

- We need vectors to handle multiple items in R ('collection')
- Vectors contain observations or measurements of a single variable
- Each vector can have only one data type - e.g. ~numeric~ [fn:1]

1) Three examples of such collections for vectors using this class:
   - numbers, e.g. the heights of students in this class
   - text, e.g. the names of students of this class
   - logical values, e.g. sex of students of this class

2) Define sample vectors ~s_heights~, ~s_names~ and ~s_male~ using the ~c~
   function. Sample names: Gavin (181), Braden (179), Kelli (167),
   Donna (166).

   #+begin_src R :results output
     (s_heights <- c(181,179,167,166))
     s_names <- c("Gavin","Braden","Kelli","Donna")
     s_male <- c(TRUE,TRUE,FALSE,FALSE)
   #+end_src

   #+RESULTS:
   : [1] 181 179 167 166

3) Print the vectors.
   #+begin_src R
     s_heights
     s_names
     s_male
   #+end_src

   #+RESULTS:
   : [1] 181 179 167 166
   : [1] "Gavin"  "Braden" "Kelli"  "Donna"
   : [1]  TRUE  TRUE FALSE FALSE

#+begin_notes
*Solution:*
1) the *heights* of every student of this class, in cm.
2) the first *names* of every student of this class (strings).
3) observations, if a student is male or not male (male means ~TRUE~).

Let's put some wood behind the arrow and define sample vectors for these:
#+end_notes

Example code: The three vectors for names, heights, and sex
#+begin_src R :session
  s_heights <- c(180, 181, 158, 175, 179, 168)
  s_names <- c("Vincent", "Natalija", "Adrian", "Andres", "Helena")
  s_male <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
  s_heights
  s_names
  s_male
#+end_src

* R object ~class~

- The function ~class~ (check the help) returns the R object type

- Object type is not the same as data type or storage type

- Besides types there are also data structures (like ~vector~)

- Let's check the class for our three vectors with student data

#+begin_notes
In order to check what R thinks about your observation or data type,
you can use the function ~class~. Look at the help page for details
and enter the examples at the bottom of the help page.

Let's call ~class~ for our three sample vectors:
#+end_notes

With pipes:
#+begin_src R
  s_heights |> class()
  s_names |> class()
  s_male |> class()
#+end_src

#+RESULTS:
: [1] "numeric"
: [1] "character"
: [1] "logical"

#+begin_src R :session :results output
  class(s_heights) # what type vector is this?
  class(s_names)   # what type vector is this?
  class(s_male)    # what type vector is this?
#+end_src
* Creating vectors [[https://youtu.be/Ov6SIrpY_io][(video)]]

Code along.

- The function to create a vector, or "combine values", is ~c()~:
  #+begin_src R
    myvec <- c(1,3,1,42)
    myvec
    class(myvec)
    is.vector(myvec)
    as.character(myvec)
  #+end_src

  #+RESULTS:
  : [1]  1  3  1 42
  : [1] "numeric"
  : [1] TRUE
  : [1] "1"  "3"  "1"  "42"

  #+begin_src R :session
    myvec <- c(1,3,1,42) # combine integers as vector
    myvec                # prints 1 3 1 42
    class(myvec)         # determine the data type - "numeric"
  #+end_src

- Vector elements can be calculations or previously stored items:
  #+begin_src R
    foo <- 32.1
    myvec2 <- c(3, -3, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44,foo)
    myvec2
  #+end_src

  #+RESULTS:
  : [1]    3.000000   -3.000000    3.450000 1000.000000    8.000000    2.201271   32.100000

  #+begin_src R
    options(digits=2)
    myvec2
  #+end_src

  #+RESULTS:
  : [1]    3.0   -3.0    3.5 1000.0    8.0    2.2   32.1

  #+begin_src R :session :results output
    foo <- 32.1
    myvec2 <- c(3, -3, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, foo)
    myvec2
  #+end_src

- Vector elements can even be vectors themselves:
  #+begin_src R
    myvec3 <- c(myvec,myvec2)
    myvec3
    (myvec4 <- c(myvec2,myvec))
  #+end_src

  #+RESULTS:
  :  [1]    1.0    3.0    1.0   42.0    3.0   -3.0    3.5 1000.0    8.0    2.2   32.1
  :  [1]    3.0   -3.0    3.5 1000.0    8.0    2.2   32.1    1.0    3.0    1.0   42.0

  #+begin_src R :session :results output
    myvec3 <- c(myvec, myvec2)
    myvec3
    class(myvec3)
  #+end_src

- In the resulting output, the two vectors were put side by side. The
  new vector now has 11 = 4 + 7 elements.

- *What about missing values*, ~NA~, and non-numbers, ~NaN~, and what
  about the special values ~Inf~ and ~-Inf~ - can you have these in
  vectors, too? Can you think about a way to test this?
  #+begin_src R
    specvec <- c(NA, NaN)
    class(specvec)
  #+end_src

  #+RESULTS:
  : [1] "numeric"

  #+begin_src R
    is.na(specvec)
    is.nan(specvec)
  #+end_src

  #+RESULTS:
  : [1] TRUE TRUE
  : [1] FALSE  TRUE

  #+begin_src R
    (specvec2 <- c(specvec, Inf, -Inf))
    is.finite(specvec2)   # output is logical!
    is.infinite(specvec2)   # output is logical!
    class(specvec2)
  #+end_src

  #+RESULTS:
  : [1]   NA  NaN  Inf -Inf
  : [1] FALSE FALSE FALSE FALSE
  : [1] FALSE FALSE  TRUE  TRUE
  : [1] "numeric"


#+begin_src R
  specvec <- c(NA, NaN) # a vector with a NA and a NaN
  class(specvec)
  is.nan(specvec)  # testing for NaN values
  is.na(specvec)   # testing for NA values
  specvec1 <- c(specvec, Inf, -Inf) # a new vector with Inf, Inf
  is.finite(specvec1)  # testing for finiteness
  is.infinite(specvec1)  # testing for infiniteness
  class(specvec1)
#+end_src

* Base R - what's that again?

- Let's not forget that there are real data out there!

- R (i.e. "[[https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf][Base R]]") includes a number of built-in datasets

- Do you remember how to find these pre-loaded datasets? One of these
  is ~Nile~. Do you remember how to get information on such a dataset
  (or on any R object)?

  #+begin_example R
    data()
  #+end_example

- What are the four environment functions to remember?
  #+begin_src R
    ls()
    search()
    #data()
    installed.packages()
  #+end_src
  
- Displaying installed packages (convert to =data.frame= first):
  #+begin_src R
    installed.packages() |> as.data.frame() |> str() |> capture.output(file="ip.txt")
    system("ls -l ip.txt")
    system("head -n 5 ip.txt")    
  #+end_src

  #+RESULTS:
  : -rw-rw-r-- 1 marcus marcus 1299 Oct 14 11:34 ip.txt
  : 'data.frame':	107 obs. of  16 variables:
  :  $ Package              : chr  "abind" "backports" "bit" "bit64" ...
  :  $ LibPath              : chr  "/home/marcus/R/x86_64-pc-linux-gnu-library/4.1" "/home/marcus/R/x86_64-pc-linux-gnu-library/4.1" "/home/marcus/R/x86_64-pc-linux-gnu-library/4.1" "/home/marcus/R/x86_64-pc-linux-gnu-library/4.1" ...
  :  $ Version              : chr  "1.4-5" "1.4.1" "4.0.5" "4.0.5" ...
  :  $ Priority             : chr  NA NA NA NA ...

- List only the packages:
  #+begin_src R :session *R* :results output :exports both
    as.data.frame(installed.packages()) -> packages
    packages$Package
  #+end_src

  #+RESULTS:
  #+begin_example
    [1] "abind"         "backports"     "bit"           "bit64"         "brio"          "broom"        
    [7] "callr"         "carData"       "cli"           "clipr"         "colorspace"    "cpp11"        
   [13] "crayon"        "data.table"    "DEoptimR"      "desc"          "diffobj"       "digest"       
   [19] "ellipsis"      "EnvStats"      "evaluate"      "fansi"         "farver"        "fs"           
   [25] "generics"      "ggplot2"       "glue"          "gtable"        "hms"           "isoband"      
   [31] "jsonlite"      "labeling"      "lifecycle"     "magrittr"      "MASS"          "Matrix"       
   [37] "MatrixModels"  "minqa"         "munsell"       "nortest"       "numDeriv"      "pillar"       
   [43] "pkgbuild"      "pkgconfig"     "pkgload"       "praise"        "prettyunits"   "processx"     
   [49] "progress"      "ps"            "purrr"         "quantreg"      "R6"            "RColorBrewer" 
   [55] "Rcpp"          "RcppEigen"     "readr"         "rematch2"      "remotes"       "rlang"        
   [61] "robustbase"    "rprojroot"     "scales"        "scatterplot3d" "SparseM"       "stringi"      
   [67] "stringr"       "testthat"      "tibble"        "tidyr"         "tidyselect"    "tzdb"         
   [73] "utf8"          "vctrs"         "viridisLite"   "vroom"         "waldo"         "withr"        
   [79] "base"          "boot"          "class"         "cluster"       "codetools"     "compiler"     
   [85] "datasets"      "foreign"       "graphics"      "grDevices"     "grid"          "KernSmooth"   
   [91] "lattice"       "MASS"          "Matrix"        "methods"       "mgcv"          "nlme"         
   [97] "nnet"          "parallel"      "rpart"         "spatial"       "splines"       "stats"        
  [103] "stats4"        "survival"      "tcltk"         "tools"         "utils"
  #+end_example

- How many packages are installed on your system?
  #+begin_src R :session *R* :results output :exports both
    length(packages$Package)
  #+end_src

  #+RESULTS:
  : [1] 107

* Example: down the Nile [[https://youtu.be/wwsD2KuoKt8][(video)]]

- What data structure (type of R object) is ~Nile~?

- ~Nile~ contains a so-called "time series", a sequence of numbers that
  correspond to measurements of the annual flow (in billion - 10⁸ -
  cubic meters) of the river Nile at [[https://en.wikipedia.org/wiki/Aswan][Aswan]], measured between
  1871-1970.

- For a full characterization, you need more than one function:
  #+begin_src R
    class(Nile) # object class aka data structures
    typeof(Nile)  # storage type
    mode(Nile) # data type
  #+end_src

  #+RESULTS:
  : [1] "ts"
  : [1] "double"
  : [1] "numeric"

- How can we print this dataset, or parts of it, on the screen?

  Structure of a time series:
  #+begin_src R 
    str(Nile)
  #+end_src

  #+RESULTS:
  :  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...

  Extracting the =time= dimension from the time series:
  #+begin_src R
    time(Nile)
  #+end_src

  #+RESULTS:
  : Time Series:
  : Start = 1871 
  : End = 1970 
  : Frequency = 1 
  :   [1] 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891
  :  [22] 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912
  :  [43] 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933
  :  [64] 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954
  :  [85] 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970

  Top and bottom of the dataset:
  #+begin_src R
    head(Nile)
    tail(Nile)
  #+end_src

  #+RESULTS:
  : [1] 1120 1160  963 1210 1160 1160
  : [1] 912 746 919 718 714 740

  The dataset:
  #+begin_src R
    Nile
  #+end_src

  #+RESULTS:
  : Time Series:
  : Start = 1871 
  : End = 1970 
  : Frequency = 1 
  :   [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020  960 1180  799  958 1140 1100
  :  [22] 1210 1150 1250 1260 1220 1030 1100  774  840  874  694  940  833  701  916  692 1020 1050  969  831  726
  :  [43]  456  824  702 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759  781  865  845
  :  [64]  944  984  897  822 1010  771  676  649  846  812  742  801 1040  860  874  848  890  744  749  838 1050
  :  [85]  918  986  797  923  975  815 1020  906  901 1170  912  746  919  718  714  740

  #+begin_notes
  Because we don't know yet how to look at sub-vectors or individual
  vector elements, we cannot directly check what type the elements of
  ~Nile~ have, but the output seems to suggest that the Nile flow is
  measured in integer numbers.

  You can also see from the print output of ~Nile~ how row labels work:
  there are 15 numbers per row, and the second row starts with the
  16th number, indicated by ~[16]~.
  #+end_notes

* Plotting the nile [[https://youtu.be/c_BvsnKU7T4][(video)]]

- Plotting is often a good entry into exploring data

- ~Nile~ is a numeric vector of a single, continuous variable over time

- To visualize such data, /histograms/ or /line plots/ are useful

- What you're really after is a picture of a value /distribution/

- Why are /histograms/ called "histograms"?
  #+begin_quote
  Translation from the Greek for "upright columns".
  #+end_quote

- How can you find out more about plotting a histogram in R?

  #+begin_notes help(hist)
  *HELP:* You know of course what to do at this point: call for help
  using ~?hist~. Skip to the ~Examples~ section at the end, where you find
  the command ~hist(islands)~. This creates a histogram of another
  dataset, ~islands~. With the help of ~?islands~, you find out quickly
  that this is a "named vector of 48 elements". Never mind what this
  means, but you can enter the command, which will generate a
  plot. This is a histogram: it plots frequency of the data and
  distributes them into bins[fn:2]. Let's get back to the river Nile.

  Like most R functions, ~hist~ has many options. If you execute
  ~hist(Nile)~, you get the same type of graph as in the example except
  that we know what the data are (annual Nile flow measurements in ~10⁸
  m³~, or 100,000,000 (100 million) of cubic metres.

  If you run ~example(Nile)~ you get a number of interesting plots, too.
  #+end_notes

* Plotting the histogram

- Let's plot the histogram of ~Nile~
  #+begin_src R :results output graphics file :file Nile.png
    hist(Nile)
  #+end_src

- *Can you interpret the plot given what you know about the data?* For
  example, what is the meaning of the longest bar in the histogram?
  #+begin_quote
  The longest bar represents the flow recordings with the counts in the period
  of observation (1870-1970), corresponding to flow volumes of 800-900 bio cubic
  metres of water at Assuan.
  #+end_quote

- Add the argument ~breaks=20~ to the ~hist~ function call. Change the
  file name in the code block header if you want to create a new PNG file
  #+begin_src R :file Nile2.png :results output graphics file :session *R* 
    
  #+end_src

- What's the new insight?
  #+begin_quote

  #+end_quote

- Some of you might already know how to put both of these plots on one
  page using the =par= function:
  #+begin_src R :file Nile3.png :session *R* :results file graphics output :exports both

  #+end_src

* Plotting the line plot

Since ~Nile~ is a time series, every data point has a time label.

You can easily plot the evolution of the date over time with ~plot~.

A line plot is useful to visualize two continuous numeric variables.

This leads to a so-called /line plot/
#+begin_src R :exports both :session :results output graphics file :file ../img/lineNile.png

#+end_src

- *Can you interpret the plot given what you know about the data?*
  #+begin_quote

  #+end_quote

- How generic is =hist=?
  - Try to make a histogram of ~mtcars~.
  - Check out the structure of ~mtcars~ to see the column vector data types.
  - Make a histogram of ~mtcars$mpg~:

- Non-graphical data (structure with =str=):
  #+begin_src R :session *R* :results output :exports both

  #+end_src

- What do you notice regarding histograms?
  #+begin_quote

  #+end_quote

- Graphical data (histogram): plot the =mpg= vector
  #+begin_src R :results graphics output file :file histmtcars.png

  #+end_src

- What is the most frequent miles-per-gallon performance?
  #+begin_quote

  #+end_quote

- Plot the =cyl= vector as a histogram.
  #+begin_src R :file cylHist.png :session *R* :results file graphics output :exports both

  #+end_src

- A better plot type is the bar plot (because =cyl= is a categorical
  variable):
  #+begin_src R :file cylBar.png :session *R* :results file graphics output :exports both

  #+end_src

- Print the =table= argument to see what =barplot= has to work with:
  #+begin_src R

  #+end_src
  
- Will =hist= work with =factor= vectors? Check out ~ToothGrowth~, another
  built-in dataset, using =str=:
  #+begin_src R

  #+end_src

- Let's try to create a histogram of the ~supp~ =factor= vector (what
  result do you expect?)
  #+begin_src R :file suppHist.png :session *R* :results file graphics output :exports both

  #+end_src

- You get this result because...
  #+begin_quote
  ...
  #+end_quote
  
- Solution:
  1) Save the =factor= in an object =tgs=
     #+begin_src R

     #+end_src

  2) Turn =factor= into numbers
     #+begin_src R :graphics

     #+end_src

  3) Plot the the values as a (fancy) histogram:
     #+begin_src R :results graphics output file :file tghist.png

     #+end_src

- Again, a barplot is more meaningful (because =supp= is categorical):
  #+begin_src R :file bartg.png :session *R* :results file graphics output :exports both

  #+end_src

For these and other settings, check out =help(hist)=, and =example(hist)=
forp the examples listed at the end of the documentation (see next
section).
* Plotting the scatter plot

- Check out the structure of =ToothGrowth= again.
  #+begin_src R

  #+end_src

- Make a =plot= of the =len= variable (tooth length of the guinea pigs):
  #+begin_src R :file tg1.png :session *R* :results file graphics output :exports both

  #+end_src

- Make a new vector by sorting the =len= variable with =sort=
  #+begin_src R

  #+end_src

- Now plot the new vector  
    #+begin_src R :file tg2.png :session *R* :results file graphics output :exports both

  #+end_src

- What happens to this scatterplot if you use the =supp= variable for =x=
  to plot the =len= variable as =y= (plot =len= as a function of =supp=)?
  #+begin_src R :file tg3.png :session *R* :results file graphics output :exports both

  #+end_src

- What's happening here?
  #+begin_quote

  #+end_quote

- What did we learn?
  #+begin_quote

  #+end_quote

* Asking for help

- When you see a new function or dataset, look it up

- Use fuzzy help search (~??~) or regular help (~?~, ~help~)

- Scroll down to check out (and run) the ~examples~

- Get an overview of the available options

#+begin_notes
In the following, I won't waste more space with the obvious: whenever
I mention a new function or dataset, or keyword, look the
corresponding help up immediately. More often than not, you will take
something away from it - at the very minimum an example. Over time,
you'll understand things even though you don't know how you possibly
could: this is because you've begun to develop a habit by using a
system of learning - looking up the help content - and the more you
look at help pages, the more you recognize known concepts.
#+end_notes

* Creating sequences and repetitions [[https://youtu.be/G2P_MVq3eyM][(video)]]

You can create vectors using the =seq= and =rep= commands. This is
especially useful when plotting, and when analyzing data frames.

* The colon ~:~ operator

~1:n~ creates a sequence of numbers separated by intervals of 1
#+begin_src R

#+end_src

Check what type of R object ~3:21~ is by applying the functions:
- ~class~ (R object class),
- ~mode~ (R object storage mode)
- ~is.vector~ (R vector check)
  #+begin_src R

  #+end_src

  Sequences created this way can also be stored.
  #+begin_src R

  #+end_src

  What happens if the first argument of ~:~ is smaller than the second?
  #+begin_src R

  #+end_src

  You can perform computations to specify the range.
  #+begin_src R

  #+end_src

  #+begin_notes details
  Try to understand what happened here by checking the numbers: the
  first value of the sequence is ~foo = 5.3~. The last value is a
  negative value, ~-47+1.5 = -45.5~. In order to generate the
  sequence, R counts down in steps of ~1~ from the first to the last
  value. It stops at ~-44.7~, because the next value, ~-45.7~ would be
  outside of the interval $[5.3,-45.5])$.
  #+end_notes

** Challenge: weird histogram

The following code creates a weird histogram:
#+begin_src R :results output graphics file :file ../colonhist.png

#+end_src

What can you do to see the proper distribution with breaks at every
number (all bars should have height 1)? See below for the solution.

* Sequences

The function ~seq~ allows modifying the step-width with ~by~:
#+begin_src R
  
#+end_src

~seq~ always starts at ~from~ but not always end on ~to~:
#+begin_src R
  
#+end_src

To end exactly on the last value, use ~length.out~:
#+begin_src R
  
#+end_src

What is the step-width in the last case? Compute it and use it
to create a sequence of 40 numbers from 3 to 27 exactly, with ~seq~.
#+begin_notes solution
#+begin_src R
  s <- seq(from = 3, to = 27, length.out = 40)
  s[2]-s[1] # step-width
  seq(from = 3, to = 27, by = s[2]-s[1])
#+end_src

#+end_notes

~length.out~ can only be positive (there is no 'negative length').

Create a decreasing sequence of length 5 from 5 to -5. Use
~length.out~ first, then use ~by~ to achieve the same result.
#+begin_notes solution
#+begin_src R
  myseq <- seq(from=5, to=-5, length.out=5)
  myseq
  myseq1 <- seq(from=5, to=-5, by = -2.5)
  myseq1
#+end_src
#+end_notes

* Solution: odd histogram with colon op =:=

When creating a histogram of the vector ~1:10~ with binwidth 10, the
resulting graph looks wrong:
#+begin_src R :results output graphics file :file ../colonhist.png

#+end_src

The fix:
#+begin_src R :results output graphics file :file ../img/colonhist2.png
  hist(x = 1:10,
       breaks = seq(from=1,
                    to=10,
                    length.out=11))
#+end_src

* Repetition

- Use ~rep~ to repeat a value, e.g. the number 1, four times:
  #+begin_src R

  #+end_src
- You can repeat any R object, e.g. the vector ~c(3, 62, 8, 3)~, or the
  scalar ~foo~, or an arbitrary arithmetic expression:
  #+begin_src R

  #+end_src
- The ~each~ argument of ~rep(x)~ says how many times each element of ~x~ is
  repeated:
  #+begin_src R :session :results output

  #+end_src

- [ ] The default of ~times~ and ~each~ is ~1~. What is ~rep(c(3,62))~ ?

- As with ~seq~, you can include the result of ~rep~ in a vector of the
  same data type (e.g. ~numeric~):
  #+begin_src R

  #+end_src

* Repetition with characters

- ~rep~ also works for characters and character vectors:
  #+begin_src R

  #+end_src

- [ ] What happens if you try to mix characters, numbers, Booleans?
  Repeat an expression that has all three data types in it.
  #+begin_src R

  #+end_src

  #+begin_notes coercion
  When you call a function with an argument of the wrong
  type, or, as in the case of ~c~, you try to create a vector of
  different data types, R responds with "[[https://www.oreilly.com/library/view/r-in-a/9781449358204/ch05s08.html][coercion]]" to make it happen.
  #+end_notes

* Sorting and measuring lengths [[https://youtu.be/KRghGmuS6Ck][(video)]]
* Sorting vector elements

- /Sorting/ is important because we don't care about memory locations

- ~sort(x)~ arranges the elements of x according to size

- The default order is ascending, or ~decreasing = FALSE~
  #+begin_src R

  #+end_src

- Special values are removed, put last or first with ~na.last~. This
  works for all special values - ~NA~, ~NaN~ and ~Inf~.
  #+begin_src R

  #+end_src

- [ ] Remember that ~NA~ is a ~logical~ object. How can you check that?
  #+begin_src R

  #+end_src

* Length of vectors

- The ~length~ function gets or sets the length of vectors[fn:3]:
  #+begin_src R

  #+end_src

  #+begin_src R

  #+end_src

- If you have functions inside the object definition, ~length~ gives you
  the number of entries /after/ the inner functions have been executed:
  #+begin_src R

  #+end_src

- R's display options are stored in ~options()~, which is a
  ~list~. Lists have a length like options. How many options does
  ~options()~ have?
  #+begin_src R

  #+end_src

* Practice: creating vectors

- Practice what you've learnt by solving problems independently.

- Download the practice file from here:
  [[https://tinyurl.com/ds105-vectors-practice][tinyurl.com/ds105-vectors-practice]]

* Naming vectors

- Naming vector elements makes code more readable.
  #+begin_src R :session

  #+end_src
- Or you can name elements explicitly using the function ~names~[fn:4]
  #+begin_src R :session

  #+end_src
- Looking under the hood of ~names~:
  #+begin_src R :session

  #+end_src

* Length of ~names~ vs. vector

- What if your names are too short (or too long) for your vector?

- Define a vector ~week~ whose elements are the names of weekdays
  #+begin_src R

  #+end_src

- Define a vector ~foo~ that contains seven numbers, and name its
  elements according to the ~week~.
  #+begin_src R

  #+end_src

- Copy ~week~ to ~workweek~, and remove ~"Saturday"~ and ~"Sunday"~ from the
  ~workweek~.
  #+begin_src R

  #+end_src

- Copy ~foo~ to ~bar~, and overwrite ~names(bar)~ with ~workweek~.
  #+begin_src R results output

  #+end_src

* Indexing vectors

- Passing a vector of positive numbers returns the slice of the
  vector containing the elements at those locations.
  #+begin_src R

  #+end_src

- Passing a vector of negative numbers returns the slice of the vector
  containing the elements everywhere except at those locations.
  #+begin_src R

  #+end_src

- Passing a logical vector returns the slice of the vector containing
  the elements where the index is ~TRUE~.
  #+begin_src R

  #+end_src

- For named vectors, passing a character vector of names returns the
  slice of the vector containing the elements with those names.
  #+begin_src R

  #+end_src

* Coercion

- All vector elements have to be of the same ~class~ or type

- When you try to mix them, R will create vectores with "coercion":
  #+begin_src R

  #+end_src

- Missing values ~NA~ are not coerced to ~character~ (e.g. ~"NA"~) because
  this would mean altering their main property, to be missing.

- Still, the whole vector is a ~character~ vector object:
  #+begin_src R

  #+end_src

- You can also explicitly convert elements using the functions
  ~as.character~, ~as.logical~ or ~as.numeric~.
  #+begin_src R

  #+end_src

- Conversion with ~as.logical~ has a surprise: any non-zero number is
  turned into ~TRUE~ if the vector is ~numeric~.
  #+begin_src R

  #+end_src

- The lesson: don't mix data types in vectors if you can avoid it!

* Summary with examples

- R is a functional language in which everything's an object.
- R functions differ in: performance (speed), ease-of-use and
  clarity.
- To assign values to objects, use the ~<-~ operator.
- To assign values to arguments in functions, use the ~=~ operator.
- The elements of a numeric, character or logical vector are
  numbers, letters or truth values.
- A vector can have arithmetic calculations or vectors as elements.
- A histogram distributes data by frequency across evenly spaced
  bins.
- Sequences of numbers can be created using the colon operator, or
  the functions ~seq~ or ~rep~.
- Vectors can be sorted with ~sort~ in either direction.
- Vector length can be measured as the number of vector elements with ~length~.
- Index vectors can be used to select sub-vectors.
- Negative index values delete the corresponding vector elements

  *R CODE EXAMPLES:*
  | ~x <- 5~                                   | assign ~5~ to object ~x~                      |
  | ~x <- x+1~                                 | overwrite ~x~ (new value)                     |
  | ~c(1,2,3,4)~                               | define (numerical) vector                     |
  | ~class(bar)~                               | check type of object ~bar~                    |
  | ~hist(x,breaks=foo)~                       | histogram of dataset ~x~ with ~foo~ bins      |
  | ~m:n~                                      | sequence ~m~ to ~n~ at intervals ~= 1~        |
  | ~seq(from=foo,to=bar,by=baz)~              | sequence from ~foo~ to ~bar~ intervals ~=baz~ |
  | ~seq(from=foo,to=bar,length.out=fuz)~      | seq. ~foo~ to ~bar~, ~fuz~ equal intervals    |
  | ~rep(x=foo,times=bar,each=baz)~            | repeat ~foo~ times ~bar~, and                 |
  |                                            | repeat each element of ~foo~ times ~baz~      |
  | ~vector("numeric",foo), numeric(foo)~      | empty numeric vector of length ~foo~          |
  | ~vector("character",foo), character(foo)~  | empty numeric vector of length ~foo~          |
  | ~vector("logical",foo), logical(foo)~      | empty numeric vector of length ~foo~          |
  | ~sort(x=foo, decreasing=FALSE)~            | sort vector ~foo~ from smallest to largest    |
  | ~sort(x=foo, decreasing=TRUE)~             | sort vector ~foo~ from largest to smallest    |
  | ~length(x=foo)~                            | print length of vector ~foo~                  |
  | ~[n]~, ~[n:m]~, ~[-n]~                     | indices ~n~, ~n~ to ~m~, deleting element ~n~ |
  | ~prod(foo)~, ~sum(foo)~                    | multiply / sum up all elements of vector foo  |
  | ~names(x)~                                 | return names of vector ~x~ (or ~NULL~)        |
  | ~as.character~, ~as.numeric~, ~as.logical~ | coerce arguments to the resp. class           |

* References

- <<cotton>> Richard Cotton (2013). [[http://duhi23.github.io/Analisis-de-datos/Cotton.pdf][Learning R.]] O'Reilly Media.

- <<davies>> Tilman M. Davies (2016). [[https://nostarch.com/bookofr][The Book of R. (No Starch
  Press).]]

- <<irizarry>> Rafael A. Irizarry (2020). [[https://rafalab.github.io/dsbook/][Introduction to Data Science]]
  (also: CRC Press, 2019).

- <<matloff>> Norman Matloff (2020). [[https://github.com/matloff/fasteR][fasteR: Fast Lane to Learning R!]].
  <<pemdas>>

* Footnotes

[fn:1]Note: If a vector contains different data types, R coerces the
vector elements to conform to one type, as we will see later. A data
type that can hold any type of value is called a ~list~.

[fn:2]The [[https://en.wikipedia.org/wiki/Histogram][Wikipedia entry for "histogram"]] is not bad as a start, lots
of examples and you'll soon find out how to make these yourself! The
origin of the name "histogram" is not clear - it was probably invented
by Pearson, who introduced this type of graph, and is short for
"HISTorical diaGRAM".

[fn:3] Both ~length~ and ~sort~, as you can read in the respective help
pages, work both for vectors and for factors. These are necessary
whenever we deal with qualities or categories (like "male" or
"female") rather than quantities. You'll learn about them soon!

[fn:4] You should look up the examples in ~help(names)~: the data set
~islands~ is a named vector suited to play around with vector naming.

[fn:5] DEFINITION NOT FOUND.

[fn:6] "Arithmetic (from the Greek ἀριθμός arithmos, 'number' and τική
[τέχνη], tiké [téchne], 'art') is a branch of mathematics that
consists of the study of numbers, especially the properties of the
traditional operations on them—addition, subtraction, multiplication,
division, exponentiation and extraction of roots." ([[https://en.wikipedia.org/wiki/Arithmetic][Wikipedia]])

[fn:7] Not just one MOOC, in fact, but a series of nine courses
altogether, with which you can get a professional certificate. These
MOOCs are hosted by [[https://www.edx.org/professional-certificate/harvardx-data-science][edX.org]].

[fn:8] For a while, I had also envisioned that I might use a
block-based, visual programming language like MIT's [[https://scratch.mit.edu/][Scratch]] or its
able cousin from Berkeley U., [[https://snap.berkeley.edu/][Snap!]] OpenSAP offers great [[https://open.sap.com/courses/snap2][(free)
courses]] on Snap! and you can learn all about Scratch online, too.

[fn:9] Fun fact: 'FORTRAN' stands for 'FORmula TRANslator'. A large
part of R's code base is written in FORTRAN, which is the oldest
programming language specifically used for scientific computations
(e.g. it was the first language I learnt at university).

[fn:10] This was mentioned in the "Getting started with R" lesson. To
list all built-in datasets in base-R, enter simply ~data()~. This is
the same function that you use to load a dataset after loading the
respective library (which contains more than one dataset).

[fn:11] Enter ~help(Nile)~, or ~?Nile~. This is one of the more useful
commands. Will only work if the corresponding dataset has been
loaded - for ~Nile~, this is the case.

[fn:12] This page-wise presentation mode with previous|next|up|down
navigation is actually the page-wise [[https://www.emacswiki.org/emacs/InfoMode][(Emacs) ~Info~]] style
presentation.

[fn:13]You know this, too: ~str(Nile)~ for the structure, or
~head(Nile)~ to see the first few (6) elements.
