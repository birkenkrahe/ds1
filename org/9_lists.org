#+title: Lists in R
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2024
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
* What will you learn?
#+attr_html: :width 500px
[[../img/list.jpg]]

- Why are lists important?
- What are the list equivalents in other program languages?
- How do you create a (named) list?
- How can you subset lists?

* Practice: creating lists
#+attr_html: :width 600px
[[../img/practice1.jpg]]

Download this file to practice and code along: [[https://tinyurl.com/lists-org][tinyurl.com/lists-org]]

- Create a list ~foo~ and print it, then print its structure:
  #+begin_src R
    foo <- list(1, c("a","b","c"), list( letters[1:3], 3.14))
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
  [1] 1

  [[2]]
  [1] "a" "b" "c"

  [[3]]
  [[3]][[1]]
  [1] "a" "b" "c"

  [[3]][[2]]
  [1] 3.14
  #+end_example

- How long is ~foo~?
  #+begin_src R
    length(foo)
  #+end_src

- Show its structure:
  #+begin_src R
    str(foo)
  #+end_src

- What R object class does ~foo~ have, and what object classes do its
  elements have?
  #+begin_src R
    class(foo)

    ## loop over the list using an apply function
    lapply(X=foo, FUN=class)

    ## loop over the list using for
    for (i in foo) print(class(i))
  #+end_src

* Why are lists important?
#+attr_html: :width 500px
[[../img/datastructures.png]]

- Data structures we met so far:
  1) Vectors (including scalars) like ~c(1,100,-55.44)~
     #+begin_src R
       c(1,100,-55.44)     # a numeric vector
       letters[1:3]        # a character vector
       c(TRUE,FALSE,TRUE)  # a logical vector
     #+end_src
  2) Matrices like ~matrix(1:9, nrow=3)~
     #+begin_src R
       matrix(1:9,nrow=3)
     #+end_src
  3) Data frames like ~ToothGrowth~
     #+begin_src R
       str(ToothGrowth)  # two numeric, one factor vectors
     #+end_src
  4) Lists

- Other R objects we've met:
  1) Operators like ~$~, ~[]~ and ~:~
  2) Functions like ~c()~, ~seq()~, ~rep()~
  3) Functions like ~hist()~, ~subset()~
  4) Utility functions like ~options()~
  5) Variables like ~foo~
  6) Constants like ~LETTERS~
  7) Environments like ~ls()~

- In short:
  1) *Everything that exists in R is an object*.
  2) *Everything that happens in R is a function call*.
  3) *Interfaces to other software are a part of R*.

- You can group any mix of R structures and objects in a ~list~

- You can even have a ~list~ as a component of another ~list~ - this
  separates languages suitable for data science from others. Scratch
  e.g. cannot do this, but Snap!, its advanced cousin, can:
  #+attr_html: :width 600px
  [[../img/snap.png]]

- Equivalents of lists in other programming languages: /recursive/
  structures, like =dictionary= in Python, =containers= in C++, or =LIST= in
  SQL.

* Creating (named) lists

- Creating a list is much like creating a vector with the ~c~ function

- You supply the elements to the ~list~ function, separated by commata

- Let's define a list ~foo~ and print it:
  #+begin_src R
    foo <- list(
      matrix(data = 1:4,
             nrow = 2,
             ncol = 2),
      c(TRUE,FALSE,TRUE,TRUE),
      "hello")
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
       [,1] [,2]
  [1,]    1    3
  [2,]    2    4

  [[2]]
  [1]  TRUE FALSE  TRUE  TRUE

  [[3]]
  [1] "hello"
  #+end_example

  #+begin_src R
    num <- seq(from=-4,to=4,length.out=20)
    mat <- matrix(c(F,T,T,T,F,T,T,F,F),nrow=3,byrow=FALSE)
    char <- c("don","strings")
    foo <- list(num,mat,char)
    foo
  #+end_src

  #+RESULTS:
  #+begin_example
  [[1]]
   [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316
   [9] -0.6315789 -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895
  [17]  2.7368421  3.1578947  3.5789474  4.0000000

  [[2]]
        [,1]  [,2]  [,3]
  [1,] FALSE  TRUE  TRUE
  [2,]  TRUE FALSE FALSE
  [3,]  TRUE  TRUE FALSE

  [[3]]
  [1] "don"     "strings"
  #+end_example

- List elements are indexed with the ~[[~ operator. Within each element,
  the elements are indexed according to their data structure

- What is the ~length~ of the list ~foo~?
  #+begin_src R
    length(x = foo)
  #+end_src

  #+RESULTS:
  : [1] 3

- What is the ~class~ of the list ~foo~ and of its elements?
  #+begin_src R
    class(foo)
    class(foo[[1]])
    class(foo[[2]])
    class(foo[[3]])
    for (i in foo) print(class(i))
  #+end_src

  #+RESULTS:
  : [1] "list"
  : [1] "numeric"
  : [1] "matrix" "array"
  : [1] "character"
  : [1] "numeric"
  : [1] "matrix" "array"
  : [1] "character"

* Practice creating a named ~list~

Create a list that contains, in this order
1) a ~seq~-uence of 20 evenly spread numbers between ~-4~ and ~4~
2) a 3 x 3 ~matrix~ of the ~logical~ vector ~c(F,T,T,T,F,T,T,F,F)~ filled
   column-wise
3) a ~character~ vector with the two strings ~"don"~ and ~"quixote"~

#+begin_src R
  seq <- seq(from=-4, to=4, length.out=20)  #1
  mat <- matrix(c(F,T,T,T,F,T,T,F,F),nrow=3,byrow=FALSE) #2
  chr <- c("don","quixote")  #3
  foo <- list(seq, mat, chr)
  foo
#+end_src

#+RESULTS:
#+begin_example
[[1]]
 [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316 -0.6315789
[10] -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895  2.7368421  3.1578947
[19]  3.5789474  4.0000000

[[2]]
      [,1]  [,2]  [,3]
[1,] FALSE  TRUE  TRUE
[2,]  TRUE FALSE FALSE
[3,]  TRUE  TRUE FALSE

[[3]]
[1] "don"     "quixote"
#+end_example

#+begin_src R


#+end_src

#+RESULTS:
: $SEQ
:  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316 -0.6315789
: [10] -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895  2.7368421  3.1578947
: [19]  3.5789474  4.0000000

* Subsetting lists

- Retrieve list members using indices in *double* square brackets

- Retrieve (or remove) list member elements using *single* square
  brackets

- Some examples:
  1) Retrieve the 1st list member of ~foo~ defined earlier.
  2) Retrieve the 3rd element of the 1st member of ~foo~.
  3) Retrieve the 2nd through 4th element of the 2nd member.
  4) Retrieve the 3rd member.
  5) What is the 2nd element of the 3rd member?
  #+begin_src R :noweb yes
    foo[[1]]        #1
    foo[[1]][3]     #2
    foo[[2]][2:4]   #3
    foo[[3]]        #4
    foo[[3]][2]     #5
  #+end_src

  #+RESULTS:
  :  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842
  :  [8] -1.0526316 -0.6315789 -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842
  : [15]  1.8947368  2.3157895  2.7368421  3.1578947  3.5789474  4.0000000
  : [1] -3.157895
  : [1] TRUE TRUE TRUE
  : [1] "don"     "quixote"
  : [1] "quixote"

- Same for the matrix member of the list: use double indices
  1) retrieve the 2nd column of the 1st member of ~foo~
  2) retrieve the 2nd row, 1st column of the 1st member of ~foo~
  3) retrieve elements 1 through 4 of the 1st member of ~foo~
  #+begin_src R
    foo[[2]]
    foo[[2]][,2]   #1
    foo[[2]][2,1]  #2
    foo[[2]][1:4]  #3  this is.vector and not matrix!
    foo[[2]][2]    # this works, too - remember byrow=FALSE
  #+end_src

  #+RESULTS:
  :       [,1]  [,2]  [,3]
  : [1,] FALSE  TRUE  TRUE
  : [2,]  TRUE FALSE FALSE
  : [3,]  TRUE  TRUE FALSE
  : [1]  TRUE FALSE  TRUE
  : [1] TRUE
  : [1] FALSE  TRUE  TRUE  TRUE
  : [1] TRUE

- Using double square brackets on a list is always interpreted with
  respect to a single member, for example:
  #+begin_src R
    foo[[c(2,3)]]
    foo[[2]][3]
    foo[[2]][3,1]
  #+end_src

  #+RESULTS:
  : [1] TRUE
  : [1] TRUE
  : [1] TRUE

- Using the ~-~ operator inside the single index brackets to remove:
  #+begin_src R
    foo[[2]]
    foo[[2]][-1] # looks at the matrix as a `byrow=TRUE` vector
    foo[[2]][-1,] # takes away the first row
    foo[[2]][,-1] # takes away the first column
  #+end_src

  #+RESULTS:
  #+begin_example
        [,1]  [,2]  [,3]
  [1,] FALSE  TRUE  TRUE
  [2,]  TRUE FALSE FALSE
  [3,]  TRUE  TRUE FALSE
  [1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE
       [,1]  [,2]  [,3]
  [1,] TRUE FALSE FALSE
  [2,] TRUE  TRUE FALSE
        [,1]  [,2]
  [1,]  TRUE  TRUE
  [2,] FALSE FALSE
  [3,]  TRUE FALSE
  list()
  #+end_example

  #+begin_src R
    char1 <- vector()
    for (member in foo) {
      char1 <- c(char1,is.character(member))
    }
    char1
  #+end_src

- Preview: how would you extract the string member of ~foo~?
  #+begin_src R
    ## with a for loop
    char <- vector()
    for (member in foo) {
      char <- c(char,is.character(member))
    }
    char
    idx <- which(char==TRUE) # get the index
    foo[[idx]]  # index list

    ## with the lapply function
    char1 <- lapply(X=foo,FUN=is.character)
    unlist(char1)
    idx <- which(char1==TRUE) # get the index
    foo[[idx]]  # index list
  #+end_src

  #+RESULTS:
  : [1] FALSE FALSE  TRUE
  : [1] "don"     "quixote"
  : [1] FALSE FALSE  TRUE
  : [1] "don"     "quixote"

- The ~apply~ family of functions will be taught in advanced data
  science, including ~lapply~ (apply ~FUN~-ctions across a whole ~list~)

* Practice extracting from a ~list~

Solve the following extraction problems:
1) Extract the 1st member of ~foo~.
2) Extract the first and the last element of the 1st member of ~foo~.
3) Extract the elements of the 1st member of ~foo~ with odd indices.

#+begin_src R
  foo[[1]]      #1
  foo[[1]][c(1,length(foo[[1]]))] #2
  foo[[1]][seq(1,length(foo[[1]]),by=2)] #3
#+end_src

#+RESULTS:
:  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316
:  [9] -0.6315789 -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895
: [17]  2.7368421  3.1578947  3.5789474  4.0000000
: [1] -4  4
:  [1] -4.0000000 -3.1578947 -2.3157895 -1.4736842 -0.6315789  0.2105263  1.0526316  1.8947368
:  [9]  2.7368421  3.5789474

* Removing, overwriting and slicing a ~list~

- To overwrite a list member, use the assignment operator ~<-~
  #+begin_src R
    foo[[3]]
    bar <- foo # safety copy
    bar[[3]] <- paste(foo[[3]], "world!")
    bar[[3]]
  #+end_src

- Here, ~paste~ concatenates strings but can also be used for output:
  #+begin_src R
    a <- "10,000"
    paste("a is", a)

    x <- 10000
    paste("x is", x)
  #+end_src

  #+RESULTS:
  : [1] "a is 10,000"
  : [1] "x is 10000"

- To remove a list member, overwrite it with ~NULL~ (like ~names~)
  #+begin_src R
    baz <- foo  # safety copy
    baz[[1]] <- NULL
    baz
  #+end_src

- /List slicing/ means selecting multiple list items at once:
  #+begin_src R
    foo[c(2,3)] # select list members 2 and 3
  #+end_src

- Note that the sliced list is itself a ~list~

* Naming lists

- List members can be /named/ just like vector or data frame elements

- A name is an R /attribute/. An unnamed list has none:
  #+begin_src R
    attributes(foo)
  #+end_src

  #+RESULTS:
  : NULL

- Name the members of ~foo~ using ~names~, then print ~str(foo)~:
  #+begin_src R
    names(foo) <- c(
      "mymatrix",
      "mylogicals",
      "mystring")
    str(foo)
  #+end_src

  #+RESULTS:
  : List of 3
  :  $ mymatrix  : num [1:20] -4 -3.58 -3.16 -2.74 -2.32 ...
  :  $ mylogicals: logi [1:3, 1:3] FALSE TRUE TRUE TRUE FALSE TRUE ...
  :  $ mystring  : chr [1:2] "don" "quixote"

- You can now use the names to subset the list as usual:
  1) Print the ~matrix~ member of ~foo~.
  2) Print the 2nd column of the ~matrix~ member.
  3) Print the 2nd through 4th element of the ~logical~ member.
  #+begin_src R
    foo$mymatrix      #1
    foo$mymatrix[,2]  #2
    foo$mylogicals[2:4]
  #+end_src

  #+RESULTS:
  :  [1] -4.0000000 -3.5789474 -3.1578947 -2.7368421 -2.3157895 -1.8947368 -1.4736842 -1.0526316
  :  [9] -0.6315789 -0.2105263  0.2105263  0.6315789  1.0526316  1.4736842  1.8947368  2.3157895
  : [17]  2.7368421  3.1578947  3.5789474  4.0000000
  : Error in foo$mymatrix[, 2] : incorrect number of dimensions
  : [1] TRUE TRUE TRUE

- Note that the ~names~ are stored as a ~character~ vector but not used
  with quotes. Also, you cannot use the names inside double brackets
  #+begin_src R
    vec <- c("a"=1,"b"=2)   # vector with two named elements
    names(vec)        # names of vector elements
    vec["a"]          # extracting element with name
    vec[1]            # extracting element with index
    vec[c("a","b")]   # extracting elements with names vector
    vec[c(1,2)]       # extracting elements with index vector
    n <- names(vec)   # storing names vector
    vec[n]            # extracting elements with names vector
  #+end_src

  #+RESULTS:
  #+begin_example
  [1] "a" "b"
  a
  1
  a
  1
  a b
  1 2
  a b
  1 2
  a b
  1 2
  #+end_example

- You can also name the list when creating it with ~list~:
  #+begin_src R
    q <- list(
      "my name"="Adam",
      "my sons"= c("Kain", "Abel"))
    str(q)
  #+end_src

* Practice naming lists

1) Make a safety copy ~np~ of ~p~
2) Name the elements of ~np~ in this order: ~num~, ~logmat~, ~char~
3) Display the structure of the named list ~p~
4) Remove the 2nd string of the 3rd member using its name
#+begin_src R
  np <- p                               #1
  names(np) <- c("num","logmat","char") #2
  str(np)                               #3
  np$char[-2]
#+end_src
